{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/routes/PrivateRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport { Navigate, useLocation } from 'react-router-dom'; // helpers\n\nimport { APICore } from '../helpers/api/apiCore'; // hooks\n\nimport { useUser } from '../hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */\nconst PrivateRoute = _ref => {\n  _s();\n\n  let {\n    component: RouteComponent,\n    roles,\n    ...rest\n  } = _ref;\n  let location = useLocation();\n  const [loggedInUser] = useUser();\n  const api = new APICore();\n  /**\n   * not logged in so redirect to login page with the return url\n   */\n\n  if (api.isUserAuthenticated() === false) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/auth/login',\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this);\n  } // check if route is restricted by role\n\n\n  if (roles && roles.indexOf(loggedInUser.role) === -1) {\n    // role not authorised so redirect to home page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: {\n        pathname: '/'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(RouteComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 12\n  }, this);\n};\n\n_s(PrivateRoute, \"muz0gA5CAMOxG0Ptis5WfmTxk0I=\", false, function () {\n  return [useLocation, useUser];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/routes/PrivateRoute.tsx"],"names":["Navigate","useLocation","APICore","useUser","PrivateRoute","component","RouteComponent","roles","rest","location","loggedInUser","api","isUserAuthenticated","from","indexOf","role","pathname"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC,C,CAEA;;AACA,SAASC,OAAT,QAAwB,wBAAxB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,UAAxB;;;AAOA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,QAAsE;AAAA;;AAAA,MAArE;AAAEC,IAAAA,SAAS,EAAEC,cAAb;AAA6BC,IAAAA,KAA7B;AAAoC,OAAGC;AAAvC,GAAqE;AACvF,MAAIC,QAAQ,GAAGR,WAAW,EAA1B;AACA,QAAM,CAACS,YAAD,IAAiBP,OAAO,EAA9B;AAEA,QAAMQ,GAAG,GAAG,IAAIT,OAAJ,EAAZ;AAEA;AACJ;AACA;;AACI,MAAIS,GAAG,CAACC,mBAAJ,OAA8B,KAAlC,EAAyC;AACrC,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE,aAAd;AAA6B,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEJ;AAAR,OAApC;AAAwD,MAAA,OAAO;AAA/D;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAXsF,CAavF;;;AACA,MAAIF,KAAK,IAAIA,KAAK,CAACO,OAAN,CAAcJ,YAAY,CAACK,IAA3B,MAAqC,CAAC,CAAnD,EAAsD;AAClD;AACA,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CApBD;;GAAMZ,Y;UACaH,W,EACQE,O;;;KAFrBC,Y;AAsBN,eAAeA,YAAf","sourcesContent":["import { Navigate, useLocation } from 'react-router-dom';\n\n// helpers\nimport { APICore } from '../helpers/api/apiCore';\n\n// hooks\nimport { useUser } from '../hooks';\n\ntype PrivateRouteProps = {\n    component: React.ComponentType;\n    roles?: string;\n};\n\n/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */\nconst PrivateRoute = ({ component: RouteComponent, roles, ...rest }: PrivateRouteProps) => {\n    let location = useLocation();\n    const [loggedInUser] = useUser();\n\n    const api = new APICore();\n\n    /**\n     * not logged in so redirect to login page with the return url\n     */\n    if (api.isUserAuthenticated() === false) {\n        return <Navigate to={'/auth/login'} state={{ from: location }} replace />;\n    }\n\n    // check if route is restricted by role\n    if (roles && roles.indexOf(loggedInUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return <Navigate to={{ pathname: '/' }} />;\n    }\n\n    return <RouteComponent />;\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}