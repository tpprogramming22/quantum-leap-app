{"ast":null,"code":"import _slicedToArray from\"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectWithoutProperties from\"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"component\",\"roles\"];import{Navigate,useLocation}from'react-router-dom';// helpers\nimport{APICore}from'../helpers/api/apiCore';// hooks\nimport{useUser}from'../hooks';import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */var PrivateRoute=function PrivateRoute(_ref){var RouteComponent=_ref.component,roles=_ref.roles,rest=_objectWithoutProperties(_ref,_excluded);var location=useLocation();var _useUser=useUser(),_useUser2=_slicedToArray(_useUser,1),loggedInUser=_useUser2[0];var api=new APICore();/**\n     * not logged in so redirect to login page with the return url\n     */if(api.isUserAuthenticated()===false){return/*#__PURE__*/_jsx(Navigate,{to:'/auth/login',state:{from:location},replace:true});}// check if route is restricted by role\nif(roles&&roles.indexOf(loggedInUser.role)===-1){// role not authorised so redirect to home page\nreturn/*#__PURE__*/_jsx(Navigate,{to:{pathname:'/'}});}return/*#__PURE__*/_jsx(RouteComponent,{});};export default PrivateRoute;","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/routes/PrivateRoute.tsx"],"names":["Navigate","useLocation","APICore","useUser","PrivateRoute","RouteComponent","component","roles","rest","location","loggedInUser","api","isUserAuthenticated","from","indexOf","role","pathname"],"mappings":"8UAAA,OAASA,QAAT,CAAmBC,WAAnB,KAAsC,kBAAtC,CAEA;AACA,OAASC,OAAT,KAAwB,wBAAxB,CAEA;AACA,OAASC,OAAT,KAAwB,UAAxB,C,2CAOA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAsE,IAAxDC,CAAAA,cAAwD,MAAnEC,SAAmE,CAAxCC,KAAwC,MAAxCA,KAAwC,CAA9BC,IAA8B,0CACvF,GAAIC,CAAAA,QAAQ,CAAGR,WAAW,EAA1B,CACA,aAAuBE,OAAO,EAA9B,sCAAOO,YAAP,cAEA,GAAMC,CAAAA,GAAG,CAAG,GAAIT,CAAAA,OAAJ,EAAZ,CAEA;AACJ;AACA,OACI,GAAIS,GAAG,CAACC,mBAAJ,KAA8B,KAAlC,CAAyC,CACrC,mBAAO,KAAC,QAAD,EAAU,EAAE,CAAE,aAAd,CAA6B,KAAK,CAAE,CAAEC,IAAI,CAAEJ,QAAR,CAApC,CAAwD,OAAO,KAA/D,EAAP,CACH,CAED;AACA,GAAIF,KAAK,EAAIA,KAAK,CAACO,OAAN,CAAcJ,YAAY,CAACK,IAA3B,IAAqC,CAAC,CAAnD,CAAsD,CAClD;AACA,mBAAO,KAAC,QAAD,EAAU,EAAE,CAAE,CAAEC,QAAQ,CAAE,GAAZ,CAAd,EAAP,CACH,CAED,mBAAO,KAAC,cAAD,IAAP,CACH,CApBD,CAsBA,cAAeZ,CAAAA,YAAf","sourcesContent":["import { Navigate, useLocation } from 'react-router-dom';\n\n// helpers\nimport { APICore } from '../helpers/api/apiCore';\n\n// hooks\nimport { useUser } from '../hooks';\n\ntype PrivateRouteProps = {\n    component: React.ComponentType;\n    roles?: string;\n};\n\n/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */\nconst PrivateRoute = ({ component: RouteComponent, roles, ...rest }: PrivateRouteProps) => {\n    let location = useLocation();\n    const [loggedInUser] = useUser();\n\n    const api = new APICore();\n\n    /**\n     * not logged in so redirect to login page with the return url\n     */\n    if (api.isUserAuthenticated() === false) {\n        return <Navigate to={'/auth/login'} state={{ from: location }} replace />;\n    }\n\n    // check if route is restricted by role\n    if (roles && roles.indexOf(loggedInUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return <Navigate to={{ pathname: '/' }} />;\n    }\n\n    return <RouteComponent />;\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}