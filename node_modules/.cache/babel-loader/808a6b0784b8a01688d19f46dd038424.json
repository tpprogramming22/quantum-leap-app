{"ast":null,"code":"import isSelectable from './isSelectable';\nexport default function defaultSelectHint(e, selectHint) {\n  var shouldSelectHint = false;\n\n  if (e.key === 'ArrowRight') {\n    // For selectable input types (\"text\", \"search\"), only select the hint if\n    // it's at the end of the input value. For non-selectable types (\"email\",\n    // \"number\"), always select the hint.\n    shouldSelectHint = isSelectable(e.currentTarget) ? e.currentTarget.selectionStart === e.currentTarget.value.length : true;\n  }\n\n  if (e.key === 'Tab') {\n    // Prevent input from blurring on TAB.\n    e.preventDefault();\n    shouldSelectHint = true;\n  }\n\n  return selectHint ? selectHint(shouldSelectHint, e) : shouldSelectHint;\n}","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/react-bootstrap-typeahead/es/utils/defaultSelectHint.js"],"names":["isSelectable","defaultSelectHint","e","selectHint","shouldSelectHint","key","currentTarget","selectionStart","value","length","preventDefault"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,eAAe,SAASC,iBAAT,CAA2BC,CAA3B,EAA8BC,UAA9B,EAA0C;AACvD,MAAIC,gBAAgB,GAAG,KAAvB;;AAEA,MAAIF,CAAC,CAACG,GAAF,KAAU,YAAd,EAA4B;AAC1B;AACA;AACA;AACAD,IAAAA,gBAAgB,GAAGJ,YAAY,CAACE,CAAC,CAACI,aAAH,CAAZ,GAAgCJ,CAAC,CAACI,aAAF,CAAgBC,cAAhB,KAAmCL,CAAC,CAACI,aAAF,CAAgBE,KAAhB,CAAsBC,MAAzF,GAAkG,IAArH;AACD;;AAED,MAAIP,CAAC,CAACG,GAAF,KAAU,KAAd,EAAqB;AACnB;AACAH,IAAAA,CAAC,CAACQ,cAAF;AACAN,IAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAED,SAAOD,UAAU,GAAGA,UAAU,CAACC,gBAAD,EAAmBF,CAAnB,CAAb,GAAqCE,gBAAtD;AACD","sourcesContent":["import isSelectable from './isSelectable';\nexport default function defaultSelectHint(e, selectHint) {\n  var shouldSelectHint = false;\n\n  if (e.key === 'ArrowRight') {\n    // For selectable input types (\"text\", \"search\"), only select the hint if\n    // it's at the end of the input value. For non-selectable types (\"email\",\n    // \"number\"), always select the hint.\n    shouldSelectHint = isSelectable(e.currentTarget) ? e.currentTarget.selectionStart === e.currentTarget.value.length : true;\n  }\n\n  if (e.key === 'Tab') {\n    // Prevent input from blurring on TAB.\n    e.preventDefault();\n    shouldSelectHint = true;\n  }\n\n  return selectHint ? selectHint(shouldSelectHint, e) : shouldSelectHint;\n}"]},"metadata":{},"sourceType":"module"}