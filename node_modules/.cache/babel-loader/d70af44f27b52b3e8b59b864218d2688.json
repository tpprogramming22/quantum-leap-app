{"ast":null,"code":"import _toConsumableArray from\"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{Badge,Card}from'react-bootstrap';import classNames from'classnames';// types\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ContexualBadges=function ContexualBadges(_ref){var variants=_ref.variants;var contexualBadges=_toConsumableArray(variants);return/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(\"h4\",{className:\"header-title\",children:\"Contexual variations\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"sub-header\",children:[\"Add any of the below mentioned modifier classes to change the appearance of a badge. Badge can be more contextual as well. Just use regular convention e.g. \",/*#__PURE__*/_jsx(\"code\",{children:\"bg-*color\"}),\" to have badge with different background.\"]}),(contexualBadges||[]).map(function(color,index){return/*#__PURE__*/_jsx(Badge,{className:classNames('me-1','badge','bg-'+color,color==='light'?'text-dark':null),bg:\"\",children:color.charAt(0).toUpperCase()+color.slice(1)},index.toString());}),/*#__PURE__*/_jsx(\"h5\",{className:\"mt-4\",children:\"Soft Badges\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"sub-header\",children:[\"Using the \",/*#__PURE__*/_jsx(\"code\",{children:\".badge-soft-*\"}),\" modifier class, you can have more soften variation.\"]}),(contexualBadges||[]).map(function(color,index){return/*#__PURE__*/_jsx(Badge,{className:classNames('me-1','badge-soft-'+color),bg:\"\",children:color.charAt(0).toUpperCase()+color.slice(1)},index.toString());}),/*#__PURE__*/_jsx(\"h5\",{className:\"mt-4\",children:\"Outline Badges\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"sub-header\",children:[\"Using the \",/*#__PURE__*/_jsx(\"code\",{children:\".badge-outline-*\"}),\" to quickly create a bordered badges.\"]}),(contexualBadges||[]).map(function(color,index){return/*#__PURE__*/_jsx(Badge,{bg:\"\",className:classNames('me-1','badge-outline-'+color),children:color.charAt(0).toUpperCase()+color.slice(1)},index.toString());})]})});};export default ContexualBadges;","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/pages/uikit/GeneralUI/ContextualBadges.tsx"],"names":["Badge","Card","classNames","ContexualBadges","variants","contexualBadges","map","color","index","charAt","toUpperCase","slice","toString"],"mappings":"mJAAA,OAASA,KAAT,CAAgBC,IAAhB,KAA4B,iBAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CAEA;wFASA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAyC,IAAtCC,CAAAA,QAAsC,MAAtCA,QAAsC,CAC7D,GAAMC,CAAAA,eAAgC,oBAAOD,QAAP,CAAtC,CAEA,mBACI,KAAC,IAAD,wBACI,MAAC,IAAD,CAAM,IAAN,yBACI,WAAI,SAAS,CAAC,cAAd,kCADJ,cAEI,WAAG,SAAS,CAAC,YAAb,uLAE8D,mCAF9D,+CAFJ,CAQK,CAACC,eAAe,EAAI,EAApB,EAAwBC,GAAxB,CAA4B,SAACC,KAAD,CAAQC,KAAR,CAAkB,CAC3C,mBACI,KAAC,KAAD,EACI,SAAS,CAAEN,UAAU,CACjB,MADiB,CAEjB,OAFiB,CAGjB,MAAQK,KAHS,CAIjBA,KAAK,GAAK,OAAV,CAAoB,WAApB,CAAkC,IAJjB,CADzB,CAOI,EAAE,CAAC,EAPP,UAUKA,KAAK,CAAEE,MAAP,CAAc,CAAd,EAAiBC,WAAjB,GAAiCH,KAAK,CAAEI,KAAP,CAAa,CAAb,CAVtC,EAQSH,KAAK,CAACI,QAAN,EART,CADJ,CAcH,CAfA,CARL,cAyBI,WAAI,SAAS,CAAC,MAAd,yBAzBJ,cA0BI,WAAG,SAAS,CAAC,YAAb,qCACc,uCADd,0DA1BJ,CA8BK,CAACP,eAAe,EAAI,EAApB,EAAwBC,GAAxB,CAA4B,SAACC,KAAD,CAAQC,KAAR,CAAkB,CAC3C,mBACI,KAAC,KAAD,EAAO,SAAS,CAAEN,UAAU,CAAC,MAAD,CAAS,cAAgBK,KAAzB,CAA5B,CAA6D,EAAE,CAAC,EAAhE,UACKA,KAAK,CAAEE,MAAP,CAAc,CAAd,EAAiBC,WAAjB,GAAiCH,KAAK,CAAEI,KAAP,CAAa,CAAb,CADtC,EAAwEH,KAAK,CAACI,QAAN,EAAxE,CADJ,CAKH,CANA,CA9BL,cAsCI,WAAI,SAAS,CAAC,MAAd,4BAtCJ,cAuCI,WAAG,SAAS,CAAC,YAAb,qCACc,0CADd,2CAvCJ,CA2CK,CAACP,eAAe,EAAI,EAApB,EAAwBC,GAAxB,CAA4B,SAACC,KAAD,CAAQC,KAAR,CAAkB,CAC3C,mBACI,KAAC,KAAD,EAAO,EAAE,CAAC,EAAV,CAAa,SAAS,CAAEN,UAAU,CAAC,MAAD,CAAS,iBAAmBK,KAA5B,CAAlC,UACKA,KAAK,CAAEE,MAAP,CAAc,CAAd,EAAiBC,WAAjB,GAAiCH,KAAK,CAAEI,KAAP,CAAa,CAAb,CADtC,EAA2EH,KAAK,CAACI,QAAN,EAA3E,CADJ,CAKH,CANA,CA3CL,GADJ,EADJ,CAuDH,CA1DD,CA4DA,cAAeT,CAAAA,eAAf","sourcesContent":["import { Badge, Card } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n// types\nimport { Variant } from './types';\n\ntype ContextualBadgesProps = {\n    variants: Variant[];\n};\n\ntype BadgesVariant = Variant;\n\nconst ContexualBadges = ({ variants }: ContextualBadgesProps) => {\n    const contexualBadges: BadgesVariant[] = [...variants];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Contexual variations</h4>\n                <p className=\"sub-header\">\n                    Add any of the below mentioned modifier classes to change the appearance of a badge. Badge can be\n                    more contextual as well. Just use regular convention e.g. <code>bg-*color</code> to have badge with\n                    different background.\n                </p>\n\n                {(contexualBadges || []).map((color, index) => {\n                    return (\n                        <Badge\n                            className={classNames(\n                                'me-1',\n                                'badge',\n                                'bg-' + color,\n                                color === 'light' ? 'text-dark' : null\n                            )}\n                            bg=\"\"\n                            key={index.toString()}\n                        >\n                            {color!.charAt(0).toUpperCase() + color!.slice(1)}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Soft Badges</h5>\n                <p className=\"sub-header\">\n                    Using the <code>.badge-soft-*</code> modifier class, you can have more soften variation.\n                </p>\n\n                {(contexualBadges || []).map((color, index) => {\n                    return (\n                        <Badge className={classNames('me-1', 'badge-soft-' + color)} bg=\"\" key={index.toString()}>\n                            {color!.charAt(0).toUpperCase() + color!.slice(1)}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Outline Badges</h5>\n                <p className=\"sub-header\">\n                    Using the <code>.badge-outline-*</code> to quickly create a bordered badges.\n                </p>\n\n                {(contexualBadges || []).map((color, index) => {\n                    return (\n                        <Badge bg=\"\" className={classNames('me-1', 'badge-outline-' + color)} key={index.toString()}>\n                            {color!.charAt(0).toUpperCase() + color!.slice(1)}\n                        </Badge>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ContexualBadges;\n"]},"metadata":{},"sourceType":"module"}