{"ast":null,"code":"import _toConsumableArray from\"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import{Row,Col,Card,Toast}from'react-bootstrap';// images\nimport logo from'../../../assets/images/logo-sm.png';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var DefaultToasts=function DefaultToasts(){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),show=_useState2[0],setShow=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),showTranslucent=_useState4[0],setShowTranslucent=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),showPlacement=_useState6[0],setShowPlacement=_useState6[1];var _useState7=useState([{time:'just now',desc:'See? Just like this.'},{time:'2 seconds ago',desc:'Heads up, toasts will stack automatically'}]),_useState8=_slicedToArray(_useState7,2),stacked=_useState8[0],setStacked=_useState8[1];/*\n     * handle close\n     */var handleClose=function handleClose(index){var list=_toConsumableArray(stacked);list.splice(index,1);setStacked(list);};return/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(\"h4\",{className:\"header-title\",children:\"Bootstrap Toasts\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-muted font-14\",children:\"Push notifications to your visitors with a toast, a lightweight and easily customizable alert message.\"}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Col,{lg:6,children:[/*#__PURE__*/_jsx(\"h5\",{className:\"mb-2\",children:\"Basic\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-muted font-14\",children:\"Toasts are as flexible as you need and have very little required markup. At a minimum, we require a single element to contain your \\u201Ctoasted\\u201D content and strongly encourage a dismiss button.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"p-3\",children:/*#__PURE__*/_jsxs(Toast,{onClose:function onClose(){return setShow(false);},show:show,delay:5000,autohide:true,children:[/*#__PURE__*/_jsxs(Toast.Header,{children:[/*#__PURE__*/_jsx(\"img\",{src:logo,alt:\"brand-logo\",height:\"12\",className:\"me-1\"}),/*#__PURE__*/_jsx(\"strong\",{className:\"me-auto\",children:\"Adminto\"}),/*#__PURE__*/_jsx(\"small\",{className:\"ms-5\",children:\"11 mins ago\"})]}),/*#__PURE__*/_jsx(Toast.Body,{children:\"Hello, world! This is a toast message.\"})]})})]}),/*#__PURE__*/_jsxs(Col,{lg:6,children:[/*#__PURE__*/_jsx(\"h5\",{className:\"mb-2\",children:\"Translucent\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-muted font-14\",children:\"Toasts are slightly translucent, too, so they blend over whatever they might appear over. For browsers that support the backdrop-filter CSS property, we\\u2019ll also attempt to blur the elements under a toast.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"p-3 bg-light\",children:/*#__PURE__*/_jsxs(Toast,{onClose:function onClose(){return setShowTranslucent(false);},show:showTranslucent,delay:8000,autohide:true,children:[/*#__PURE__*/_jsxs(Toast.Header,{children:[/*#__PURE__*/_jsx(\"img\",{src:logo,alt:\"brand-logo\",height:\"12\",className:\"me-1\"}),/*#__PURE__*/_jsx(\"strong\",{className:\"me-auto\",children:\"Adminto\"}),/*#__PURE__*/_jsx(\"small\",{className:\"ms-5\",children:\"11 mins ago\"})]}),/*#__PURE__*/_jsx(Toast.Body,{children:\"Hello, world! This is a toast message.\"})]})})]})]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Col,{lg:6,className:\"mt-4\",children:[/*#__PURE__*/_jsx(\"h5\",{className:\"mb-2\",children:\"Stacking\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-muted font-14\",children:\"When you have multiple toasts, we default to vertiaclly stacking them in a readable manner.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"p-3\",children:/*#__PURE__*/_jsx(\"div\",{\"aria-live\":\"polite\",\"aria-atomic\":\"true\",style:{position:'relative',minHeight:'200px'},children:/*#__PURE__*/_jsx(\"div\",{className:\"toast-container\",style:{position:'absolute',top:0,right:0},children:(stacked||[]).map(function(item,index){return/*#__PURE__*/_jsxs(Toast,{onClose:function onClose(){return handleClose(index);},delay:11000,autohide:true,children:[/*#__PURE__*/_jsxs(Toast.Header,{children:[/*#__PURE__*/_jsx(\"img\",{src:logo,alt:\"brand-logo\",height:\"12\",className:\"me-1\"}),/*#__PURE__*/_jsx(\"strong\",{className:\"me-auto\",children:\"Adminto\"}),/*#__PURE__*/_jsx(\"small\",{className:\"ms-5\",children:item.time})]}),/*#__PURE__*/_jsx(Toast.Body,{children:item.desc})]},index.toString());})})})})]}),/*#__PURE__*/_jsxs(Col,{lg:6,className:\"mt-4\",children:[/*#__PURE__*/_jsx(\"h5\",{className:\"mb-2\",children:\"Placement\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-muted font-14\",children:[\"Place toasts with custom CSS as you need them. The top right is often used for notifications, as is the top middle. If you\\u2019re only ever going to show one toast at a time, put the positioning styles right on the \",/*#__PURE__*/_jsx(\"code\",{children:\".toast\"}),\".\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"p-3\",children:/*#__PURE__*/_jsx(\"div\",{\"aria-live\":\"polite\",\"aria-atomic\":\"true\",className:\"d-flex justify-content-center align-items-center\",style:{minHeight:'200px'},children:/*#__PURE__*/_jsxs(Toast,{onClose:function onClose(){return setShowPlacement(false);},show:showPlacement,children:[/*#__PURE__*/_jsxs(Toast.Header,{children:[/*#__PURE__*/_jsx(\"img\",{src:logo,alt:\"brand-logo\",height:\"12\",className:\"me-1\"}),/*#__PURE__*/_jsx(\"strong\",{className:\"me-auto\",children:\"Adminto\"}),/*#__PURE__*/_jsx(\"small\",{className:\"ms-5\",children:\"1 mins ago\"})]}),/*#__PURE__*/_jsx(Toast.Body,{children:\"Heads up, toasts will stack automatically\"})]})})})]})]})]})});};export default DefaultToasts;","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/pages/uikit/Notifications/DefaultToasts.tsx"],"names":["useState","Row","Col","Card","Toast","logo","DefaultToasts","show","setShow","showTranslucent","setShowTranslucent","showPlacement","setShowPlacement","time","desc","stacked","setStacked","handleClose","index","list","splice","position","minHeight","top","right","map","item","toString"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { Row, Col, Card, Toast } from 'react-bootstrap';\n\n// images\nimport logo from '../../../assets/images/logo-sm.png';\n\nconst DefaultToasts = () => {\n    const [show, setShow] = useState<boolean>(true);\n    const [showTranslucent, setShowTranslucent] = useState<boolean>(true);\n    const [showPlacement, setShowPlacement] = useState<boolean>(true);\n\n    const [stacked, setStacked] = useState([\n        {\n            time: 'just now',\n            desc: 'See? Just like this.',\n        },\n        {\n            time: '2 seconds ago',\n            desc: 'Heads up, toasts will stack automatically',\n        },\n    ]);\n\n    /*\n     * handle close\n     */\n    const handleClose = (index: number) => {\n        const list = [...stacked];\n        list.splice(index, 1);\n        setStacked(list);\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Bootstrap Toasts</h4>\n                <p className=\"text-muted font-14\">\n                    Push notifications to your visitors with a toast, a lightweight and easily customizable alert\n                    message.\n                </p>\n\n                <Row>\n                    <Col lg={6}>\n                        <h5 className=\"mb-2\">Basic</h5>\n                        <p className=\"text-muted font-14\">\n                            Toasts are as flexible as you need and have very little required markup. At a minimum, we\n                            require a single element to contain your “toasted” content and strongly encourage a dismiss\n                            button.\n                        </p>\n                        <div className=\"p-3\">\n                            <Toast onClose={() => setShow(false)} show={show} delay={5000} autohide>\n                                <Toast.Header>\n                                    <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                    <strong className=\"me-auto\">Adminto</strong>\n                                    <small className=\"ms-5\">11 mins ago</small>\n                                </Toast.Header>\n                                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                            </Toast>\n                        </div>\n                    </Col>\n\n                    <Col lg={6}>\n                        <h5 className=\"mb-2\">Translucent</h5>\n                        <p className=\"text-muted font-14\">\n                            Toasts are slightly translucent, too, so they blend over whatever they might appear over.\n                            For browsers that support the backdrop-filter CSS property, we’ll also attempt to blur the\n                            elements under a toast.\n                        </p>\n\n                        <div className=\"p-3 bg-light\">\n                            <Toast\n                                onClose={() => setShowTranslucent(false)}\n                                show={showTranslucent}\n                                delay={8000}\n                                autohide\n                            >\n                                <Toast.Header>\n                                    <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                    <strong className=\"me-auto\">Adminto</strong>\n                                    <small className=\"ms-5\">11 mins ago</small>\n                                </Toast.Header>\n                                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                            </Toast>\n                        </div>\n                    </Col>\n                </Row>\n\n                {/* stacked */}\n                <Row>\n                    <Col lg={6} className=\"mt-4\">\n                        <h5 className=\"mb-2\">Stacking</h5>\n                        <p className=\"text-muted font-14\">\n                            When you have multiple toasts, we default to vertiaclly stacking them in a readable manner.\n                        </p>\n                        <div className=\"p-3\">\n                            <div\n                                aria-live=\"polite\"\n                                aria-atomic=\"true\"\n                                style={{ position: 'relative', minHeight: '200px' }}\n                            >\n                                <div className=\"toast-container\" style={{ position: 'absolute', top: 0, right: 0 }}>\n                                    {(stacked || []).map((item, index) => {\n                                        return (\n                                            <Toast\n                                                key={index.toString()}\n                                                onClose={() => handleClose(index)}\n                                                delay={11000}\n                                                autohide\n                                            >\n                                                <Toast.Header>\n                                                    <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                                    <strong className=\"me-auto\">Adminto</strong>\n                                                    <small className=\"ms-5\">{item.time}</small>\n                                                </Toast.Header>\n                                                <Toast.Body>{item.desc}</Toast.Body>\n                                            </Toast>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </Col>\n\n                    <Col lg={6} className=\"mt-4\">\n                        <h5 className=\"mb-2\">Placement</h5>\n                        <p className=\"text-muted font-14\">\n                            Place toasts with custom CSS as you need them. The top right is often used for\n                            notifications, as is the top middle. If you’re only ever going to show one toast at a time,\n                            put the positioning styles right on the <code>.toast</code>.\n                        </p>\n\n                        <div className=\"p-3\">\n                            <div\n                                aria-live=\"polite\"\n                                aria-atomic=\"true\"\n                                className=\"d-flex justify-content-center align-items-center\"\n                                style={{ minHeight: '200px' }}\n                            >\n                                <Toast onClose={() => setShowPlacement(false)} show={showPlacement}>\n                                    <Toast.Header>\n                                        <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                        <strong className=\"me-auto\">Adminto</strong>\n                                        <small className=\"ms-5\">1 mins ago</small>\n                                    </Toast.Header>\n                                    <Toast.Body>Heads up, toasts will stack automatically</Toast.Body>\n                                </Toast>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default DefaultToasts;\n"]},"metadata":{},"sourceType":"module"}