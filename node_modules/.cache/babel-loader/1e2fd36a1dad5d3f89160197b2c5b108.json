{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/@babel/runtime/regenerator/index.js\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(login),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(logout),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(signup),_marked4=/*#__PURE__*/_regeneratorRuntime.mark(forgotPassword),_marked5=/*#__PURE__*/_regeneratorRuntime.mark(watchLoginUser),_marked6=/*#__PURE__*/_regeneratorRuntime.mark(watchLogout),_marked7=/*#__PURE__*/_regeneratorRuntime.mark(watchSignup),_marked8=/*#__PURE__*/_regeneratorRuntime.mark(watchForgotPassword),_marked9=/*#__PURE__*/_regeneratorRuntime.mark(authSaga);import{all,fork,put,takeEvery,call}from'redux-saga/effects';// apicore\nimport{APICore,setAuthorization}from'../../helpers/api/apiCore';// helpers\nimport{login as loginApi,logout as logoutApi,signup as signupApi,forgotPassword as forgotPasswordApi}from'../../helpers/';// actions\nimport{authApiResponseSuccess,authApiResponseError}from'./actions';// constants\nimport{AuthActionTypes}from'./constants';var api=new APICore();/**\n * Login the user\n * @param {*} payload - username and password\n */function login(_ref){var _ref$payload,email,password,type,response,user;return _regeneratorRuntime.wrap(function login$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref$payload=_ref.payload,email=_ref$payload.email,password=_ref$payload.password,type=_ref.type;_context.prev=1;_context.next=4;return call(loginApi,{email:email,password:password});case 4:response=_context.sent;user=response.data;// NOTE - You can change this according to response format from your api\napi.setLoggedInUser(user);setAuthorization(user['token']);_context.next=10;return put(authApiResponseSuccess(AuthActionTypes.LOGIN_USER,user));case 10:_context.next=18;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](1);_context.next=16;return put(authApiResponseError(AuthActionTypes.LOGIN_USER,_context.t0));case 16:api.setLoggedInUser(null);setAuthorization(null);case 18:case\"end\":return _context.stop();}}},_marked,null,[[1,12]]);}/**\n * Logout the user\n */function logout(){return _regeneratorRuntime.wrap(function logout$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return call(logoutApi);case 3:api.setLoggedInUser(null);setAuthorization(null);_context2.next=7;return put(authApiResponseSuccess(AuthActionTypes.LOGOUT_USER,{}));case 7:_context2.next=13;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](0);_context2.next=13;return put(authApiResponseError(AuthActionTypes.LOGOUT_USER,_context2.t0));case 13:case\"end\":return _context2.stop();}}},_marked2,null,[[0,9]]);}function signup(_ref2){var _ref2$payload,fullname,email,password,response,user;return _regeneratorRuntime.wrap(function signup$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_ref2$payload=_ref2.payload,fullname=_ref2$payload.fullname,email=_ref2$payload.email,password=_ref2$payload.password;_context3.prev=1;_context3.next=4;return call(signupApi,{fullname:fullname,email:email,password:password});case 4:response=_context3.sent;user=response.data;// api.setLoggedInUser(user);\n// setAuthorization(user['token']);\n_context3.next=8;return put(authApiResponseSuccess(AuthActionTypes.SIGNUP_USER,user));case 8:_context3.next=16;break;case 10:_context3.prev=10;_context3.t0=_context3[\"catch\"](1);_context3.next=14;return put(authApiResponseError(AuthActionTypes.SIGNUP_USER,_context3.t0));case 14:api.setLoggedInUser(null);setAuthorization(null);case 16:case\"end\":return _context3.stop();}}},_marked3,null,[[1,10]]);}function forgotPassword(_ref3){var email,response;return _regeneratorRuntime.wrap(function forgotPassword$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:email=_ref3.payload.email;_context4.prev=1;_context4.next=4;return call(forgotPasswordApi,{email:email});case 4:response=_context4.sent;_context4.next=7;return put(authApiResponseSuccess(AuthActionTypes.FORGOT_PASSWORD,response.data));case 7:_context4.next=13;break;case 9:_context4.prev=9;_context4.t0=_context4[\"catch\"](1);_context4.next=13;return put(authApiResponseError(AuthActionTypes.FORGOT_PASSWORD,_context4.t0));case 13:case\"end\":return _context4.stop();}}},_marked4,null,[[1,9]]);}export function watchLoginUser(){return _regeneratorRuntime.wrap(function watchLoginUser$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return takeEvery(AuthActionTypes.LOGIN_USER,login);case 2:case\"end\":return _context5.stop();}}},_marked5);}export function watchLogout(){return _regeneratorRuntime.wrap(function watchLogout$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return takeEvery(AuthActionTypes.LOGOUT_USER,logout);case 2:case\"end\":return _context6.stop();}}},_marked6);}export function watchSignup(){return _regeneratorRuntime.wrap(function watchSignup$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return takeEvery(AuthActionTypes.SIGNUP_USER,signup);case 2:case\"end\":return _context7.stop();}}},_marked7);}export function watchForgotPassword(){return _regeneratorRuntime.wrap(function watchForgotPassword$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return takeEvery(AuthActionTypes.FORGOT_PASSWORD,forgotPassword);case 2:case\"end\":return _context8.stop();}}},_marked8);}function authSaga(){return _regeneratorRuntime.wrap(function authSaga$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return all([fork(watchLoginUser),fork(watchLogout),fork(watchSignup),fork(watchForgotPassword)]);case 2:case\"end\":return _context9.stop();}}},_marked9);}export default authSaga;","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/redux/auth/saga.ts"],"names":["login","logout","signup","forgotPassword","watchLoginUser","watchLogout","watchSignup","watchForgotPassword","authSaga","all","fork","put","takeEvery","call","APICore","setAuthorization","loginApi","logoutApi","signupApi","forgotPasswordApi","authApiResponseSuccess","authApiResponseError","AuthActionTypes","api","payload","email","password","type","response","user","data","setLoggedInUser","LOGIN_USER","LOGOUT_USER","fullname","SIGNUP_USER","FORGOT_PASSWORD"],"mappings":"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","sourcesContent":["import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// apicore\nimport { APICore, setAuthorization } from '../../helpers/api/apiCore';\n\n// helpers\nimport {\n    login as loginApi,\n    logout as logoutApi,\n    signup as signupApi,\n    forgotPassword as forgotPasswordApi,\n} from '../../helpers/';\n\n// actions\nimport { authApiResponseSuccess, authApiResponseError } from './actions';\n\n// constants\nimport { AuthActionTypes } from './constants';\n\ntype UserData = {\n    payload: {\n        username: string;\n        password: string;\n        fullname: string;\n        email: string;\n    };\n    type: string;\n};\n\nconst api = new APICore();\n\n/**\n * Login the user\n * @param {*} payload - username and password\n */\nfunction* login({ payload: { email, password }, type }: UserData): SagaIterator {\n    try {\n        const response = yield call(loginApi, { email, password });\n        const user = response.data;\n        // NOTE - You can change this according to response format from your api\n        api.setLoggedInUser(user);\n        setAuthorization(user['token']);\n        yield put(authApiResponseSuccess(AuthActionTypes.LOGIN_USER, user));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.LOGIN_USER, error));\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n    }\n}\n\n/**\n * Logout the user\n */\nfunction* logout(): SagaIterator {\n    try {\n        yield call(logoutApi);\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n        yield put(authApiResponseSuccess(AuthActionTypes.LOGOUT_USER, {}));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.LOGOUT_USER, error));\n    }\n}\n\nfunction* signup({ payload: { fullname, email, password } }: UserData): SagaIterator {\n    try {\n        const response = yield call(signupApi, { fullname, email, password });\n        const user = response.data;\n        // api.setLoggedInUser(user);\n        // setAuthorization(user['token']);\n        yield put(authApiResponseSuccess(AuthActionTypes.SIGNUP_USER, user));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.SIGNUP_USER, error));\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n    }\n}\n\nfunction* forgotPassword({ payload: { email } }: UserData): SagaIterator {\n    try {\n        const response = yield call(forgotPasswordApi, { email });\n        yield put(authApiResponseSuccess(AuthActionTypes.FORGOT_PASSWORD, response.data));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.FORGOT_PASSWORD, error));\n    }\n}\nexport function* watchLoginUser() {\n    yield takeEvery(AuthActionTypes.LOGIN_USER, login);\n}\n\nexport function* watchLogout() {\n    yield takeEvery(AuthActionTypes.LOGOUT_USER, logout);\n}\n\nexport function* watchSignup(): any {\n    yield takeEvery(AuthActionTypes.SIGNUP_USER, signup);\n}\n\nexport function* watchForgotPassword(): any {\n    yield takeEvery(AuthActionTypes.FORGOT_PASSWORD, forgotPassword);\n}\n\nfunction* authSaga() {\n    yield all([fork(watchLoginUser), fork(watchLogout), fork(watchSignup), fork(watchForgotPassword)]);\n}\n\nexport default authSaga;\n"]},"metadata":{},"sourceType":"module"}