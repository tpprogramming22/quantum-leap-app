{"ast":null,"code":"import _slicedToArray from\"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import axios from'axios';import MockAdapter from'axios-mock-adapter';var mock=new MockAdapter(axios);export function configureFakeBackend(){var users=[{id:1,email:'adminto@coderthemes.com',username:'test',password:'test',firstName:'Test',lastName:'User',role:'Admin',token:'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI'}];mock.onPost('/login/').reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){// get parameters from post request\nvar params=JSON.parse(config.data);// find if any user matches login credentials\nvar filteredUsers=users.filter(function(user){return user.email===params.email&&user.password===params.password;});if(filteredUsers.length){// if login details are valid return user details and fake jwt token\nvar user=filteredUsers[0];resolve([200,user]);}else{// else return error\nresolve([401,{message:'Username or password is incorrect'}]);}},1000);});});mock.onPost('/register/').reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){// get parameters from post request\nvar params=JSON.parse(config.data);// add new users\nvar _params$fullname$spli=params.fullname.split(' '),_params$fullname$spli2=_slicedToArray(_params$fullname$spli,2),firstName=_params$fullname$spli2[0],lastName=_params$fullname$spli2[1];var newUser={id:users.length+1,username:firstName,password:params.password,firstName:firstName,lastName:lastName,role:'Admin',token:'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI'};users.push(newUser);resolve([200,newUser]);},1000);});});mock.onPost('/forget-password/').reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){// get parameters from post request\nvar params=JSON.parse(config.data);// find if any user matches login credentials\nvar filteredUsers=users.filter(function(user){return user.email===params.email;});if(filteredUsers.length){// if login details are valid return user details and fake jwt token\nvar responseJson={message:\"We've sent you a link to reset password to your registered email.\"};resolve([200,responseJson]);}else{// else return error\nresolve([401,{message:'Sorry, we could not find any registered user with entered username'}]);}},1000);});});}","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/helpers/fake-backend.ts"],"names":["axios","MockAdapter","mock","configureFakeBackend","users","id","email","username","password","firstName","lastName","role","token","onPost","reply","config","Promise","resolve","reject","setTimeout","params","JSON","parse","data","filteredUsers","filter","user","length","message","fullname","split","newUser","push","responseJson"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\ntype UserData = {\n    id: number;\n    email?: string;\n    username: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    token: string;\n};\n\nvar mock = new MockAdapter(axios);\n\nexport function configureFakeBackend() {\n    let users: UserData[] = [\n        {\n            id: 1,\n            email: 'adminto@coderthemes.com',\n            username: 'test',\n            password: 'test',\n            firstName: 'Test',\n            lastName: 'User',\n            role: 'Admin',\n            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI',\n        },\n    ];\n\n    mock.onPost('/login/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.email === params.email && user.password === params.password;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let user = filteredUsers[0];\n                    resolve([200, user]);\n                } else {\n                    // else return error\n                    resolve([401, { message: 'Username or password is incorrect' }]);\n                }\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/register/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // add new users\n                let [firstName, lastName] = params.fullname.split(' ');\n                let newUser: UserData = {\n                    id: users.length + 1,\n                    username: firstName,\n                    password: params.password,\n                    firstName: firstName,\n                    lastName: lastName,\n                    role: 'Admin',\n                    token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI',\n                };\n                users.push(newUser);\n\n                resolve([200, newUser]);\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/forget-password/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.email === params.email;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let responseJson = {\n                        message: \"We've sent you a link to reset password to your registered email.\",\n                    };\n                    resolve([200, responseJson]);\n                } else {\n                    // else return error\n                    resolve([\n                        401,\n                        {\n                            message: 'Sorry, we could not find any registered user with entered username',\n                        },\n                    ]);\n                }\n            }, 1000);\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}