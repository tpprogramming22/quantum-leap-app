{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/pages/apps/Chat/ChatArea.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup'; // components\n\nimport { FormInput } from '../../../components/form';\nimport Loader from '../../../components/Loader'; // types\n\n// dummy data\nimport { messages } from './data'; // images\n\nimport avatar1 from '../../../assets/images/users/user-1.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserMessage = _ref => {\n  let {\n    message,\n    toUser\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: classnames('clearfix', {\n      odd: message.from.id === toUser.id\n    }),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list\",\n      children: [message.from.avatar ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-avatar\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: message.from.avatar,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-avatar\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: classnames('d-flex', 'align-items-center', 'justify-content-center', 'avatar-sm', 'rounded-circle', 'bg-soft-' + message.from.variant, 'text-' + message.from.variant),\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: classnames(message.from.icon)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversation-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ctext-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            children: message.from.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"time\",\n          children: message.sendOn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_c = UserMessage;\n\n// ChatArea\nconst ChatArea = _ref2 => {\n  _s();\n\n  let {\n    selectedUser\n  } = _ref2;\n  const [loading, setLoading] = useState(false);\n  const [userMessages, setUserMessages] = useState([]);\n  const [toUser] = useState({\n    id: 9,\n    name: 'Geneva M',\n    avatar: avatar1\n  }); // Fetches the messages for selected user\n\n  const getMessagesForUser = useCallback(() => {\n    if (selectedUser) {\n      setLoading(true);\n      setTimeout(() => {\n        setUserMessages([...messages].filter(m => m.to.id === toUser.id && m.from.id === selectedUser.id || toUser.id === m.from.id && m.to.id === selectedUser.id));\n        setLoading(false);\n      }, 750);\n    }\n  }, [selectedUser, toUser]);\n  useEffect(() => {\n    getMessagesForUser();\n  }, [getMessagesForUser]); // form validation schema\n\n  const schemaResolver = yupResolver(yup.object().shape({\n    newMessage: yup.string().required('Please enter your messsage')\n  })); // form methods\n\n  const methods = useForm({\n    resolver: schemaResolver\n  });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: {\n      errors\n    },\n    reset\n  } = methods; // sends the chat message\n\n  const sendChatMessage = data => {\n    let newUserMessages = [...userMessages];\n    newUserMessages.push({\n      id: userMessages.length + 1,\n      from: toUser,\n      to: selectedUser,\n      message: data['newMessage'],\n      sendOn: new Date().getHours() + ':' + new Date().getMinutes()\n    });\n    setUserMessages(newUserMessages);\n    reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"conversation-list-card\",\n    children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n        className: \"float-end\",\n        align: \"end\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n          as: \"a\",\n          className: \"cursor-pointer card-drop\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"mdi mdi-dots-vertical\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            children: \"Anothther Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            children: \"Something Else\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            children: \"Separated link\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-grow-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"mt-0 mb-1 text-truncate\",\n            children: selectedUser.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-13 text-muted mb-0\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"mdi mdi-circle text-success me-1 font-11\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this), \"Active\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"my-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(SimpleBar, {\n        style: {\n          height: '410px',\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"conversation-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-day-title\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"title\",\n                children: \"Today\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this), (userMessages || []).map((message, index) => {\n            return /*#__PURE__*/_jsxDEV(UserMessage, {\n              message: message,\n              toUser: toUser\n            }, index.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 36\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-3 conversation-input border-top\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        name: \"chat-form\",\n        id: \"chat-form\",\n        onSubmit: handleSubmit(sendChatMessage),\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(FormInput, {\n              type: \"text\",\n              name: \"newMessage\",\n              placeholder: \"Enter Message...\",\n              register: register,\n              errors: errors,\n              control: control\n            }, \"newMessage\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: \"auto\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary chat-send width-md waves-effect waves-light\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"d-none d-sm-inline-block me-2\",\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"mdi mdi-send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatArea, \"TAYt/digvvcfa7L/ugOfWJYVE/A=\", false, function () {\n  return [useForm];\n});\n\n_c2 = ChatArea;\nexport default ChatArea;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserMessage\");\n$RefreshReg$(_c2, \"ChatArea\");","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/pages/apps/Chat/ChatArea.tsx"],"names":["useCallback","useEffect","useState","useForm","Card","Dropdown","Row","Col","classnames","SimpleBar","yup","yupResolver","FormInput","Loader","messages","avatar1","UserMessage","message","toUser","odd","from","id","avatar","variant","icon","name","sendOn","ChatArea","selectedUser","loading","setLoading","userMessages","setUserMessages","getMessagesForUser","setTimeout","filter","m","to","schemaResolver","object","shape","newMessage","string","required","methods","resolver","handleSubmit","register","control","formState","errors","reset","sendChatMessage","data","newUserMessages","push","length","Date","getHours","getMinutes","height","width","map","index","toString"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,GAAzB,EAA8BC,GAA9B,QAAyC,iBAAzC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,yBAA5B,C,CAEA;;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,4BAAnB,C,CAEA;;AAGA;AACA,SAASC,QAAT,QAAyB,QAAzB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,yCAApB;;;AAEA,MAAMC,WAAW,GAAG,QAAqE;AAAA,MAApE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAoE;AACrF,sBACI;AAAI,IAAA,SAAS,EAAEV,UAAU,CAAC,UAAD,EAAa;AAAEW,MAAAA,GAAG,EAAEF,OAAO,CAACG,IAAR,CAAaC,EAAb,KAAoBH,MAAM,CAACG;AAAlC,KAAb,CAAzB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,iBACKJ,OAAO,CAACG,IAAR,CAAaE,MAAb,gBACG;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACI;AAAK,UAAA,GAAG,EAAEL,OAAO,CAACG,IAAR,CAAaE,MAAvB;AAA+B,UAAA,GAAG,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADH,gBAKG;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACI;AACI,UAAA,SAAS,EAAEd,UAAU,CACjB,QADiB,EAEjB,oBAFiB,EAGjB,wBAHiB,EAIjB,WAJiB,EAKjB,gBALiB,EAMjB,aAAaS,OAAO,CAACG,IAAR,CAAaG,OANT,EAOjB,UAAUN,OAAO,CAACG,IAAR,CAAaG,OAPN,CADzB;AAAA,iCAWI;AAAG,YAAA,SAAS,EAAEf,UAAU,CAACS,OAAO,CAACG,IAAR,CAAaI,IAAd;AAAxB;AAAA;AAAA;AAAA;AAAA;AAXJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANR,eAuBI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACI;AAAA,sBAAIP,OAAO,CAACG,IAAR,CAAaK;AAAjB;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,sBAAIR,OAAO,CAACA;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAM,UAAA,SAAS,EAAC,MAAhB;AAAA,oBAAwBA,OAAO,CAACS;AAAhC;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CApCD;;KAAMV,W;;AA0CN;AACA,MAAMW,QAAQ,GAAG,SAAqC;AAAA;;AAAA,MAApC;AAAEC,IAAAA;AAAF,GAAoC;AAClD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAU,KAAV,CAAtC;AAEA,QAAM,CAAC6B,YAAD,EAAeC,eAAf,IAAkC9B,QAAQ,CAAgB,EAAhB,CAAhD;AACA,QAAM,CAACgB,MAAD,IAAWhB,QAAQ,CAAW;AAChCmB,IAAAA,EAAE,EAAE,CAD4B;AAEhCI,IAAAA,IAAI,EAAE,UAF0B;AAGhCH,IAAAA,MAAM,EAAEP;AAHwB,GAAX,CAAzB,CAJkD,CAUlD;;AACA,QAAMkB,kBAAkB,GAAGjC,WAAW,CAAC,MAAM;AACzC,QAAI4B,YAAJ,EAAkB;AACdE,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAI,MAAAA,UAAU,CAAC,MAAM;AACbF,QAAAA,eAAe,CACX,CAAC,GAAGlB,QAAJ,EAAcqB,MAAd,CACKC,CAAD,IACKA,CAAC,CAACC,EAAF,CAAKhB,EAAL,KAAYH,MAAM,CAACG,EAAnB,IAAyBe,CAAC,CAAChB,IAAF,CAAOC,EAAP,KAAcO,YAAY,CAACP,EAArD,IACCH,MAAM,CAACG,EAAP,KAAce,CAAC,CAAChB,IAAF,CAAOC,EAArB,IAA2Be,CAAC,CAACC,EAAF,CAAKhB,EAAL,KAAYO,YAAY,CAACP,EAH7D,CADW,CAAf;AAOAS,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OATS,EASP,GATO,CAAV;AAUH;AACJ,GAdqC,EAcnC,CAACF,YAAD,EAAeV,MAAf,CAdmC,CAAtC;AAgBAjB,EAAAA,SAAS,CAAC,MAAM;AACZgC,IAAAA,kBAAkB;AACrB,GAFQ,EAEN,CAACA,kBAAD,CAFM,CAAT,CA3BkD,CA+BlD;;AACA,QAAMK,cAAc,GAAG3B,WAAW,CAC9BD,GAAG,CAAC6B,MAAJ,GAAaC,KAAb,CAAmB;AACfC,IAAAA,UAAU,EAAE/B,GAAG,CAACgC,MAAJ,GAAaC,QAAb,CAAsB,4BAAtB;AADG,GAAnB,CAD8B,CAAlC,CAhCkD,CAsClD;;AACA,QAAMC,OAAO,GAAGzC,OAAO,CAAC;AAAE0C,IAAAA,QAAQ,EAAEP;AAAZ,GAAD,CAAvB;AACA,QAAM;AACFQ,IAAAA,YADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,OAHE;AAIFC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KAJT;AAKFC,IAAAA;AALE,MAMFP,OANJ,CAxCkD,CAgDlD;;AACA,QAAMQ,eAAe,GAAIC,IAAD,IAAmC;AACvD,QAAIC,eAAe,GAAG,CAAC,GAAGvB,YAAJ,CAAtB;AACAuB,IAAAA,eAAe,CAACC,IAAhB,CAAqB;AACjBlC,MAAAA,EAAE,EAAEU,YAAY,CAACyB,MAAb,GAAsB,CADT;AAEjBpC,MAAAA,IAAI,EAAEF,MAFW;AAGjBmB,MAAAA,EAAE,EAAET,YAHa;AAIjBX,MAAAA,OAAO,EAAEoC,IAAI,CAAC,YAAD,CAJI;AAKjB3B,MAAAA,MAAM,EAAE,IAAI+B,IAAJ,GAAWC,QAAX,KAAwB,GAAxB,GAA8B,IAAID,IAAJ,GAAWE,UAAX;AALrB,KAArB;AAOA3B,IAAAA,eAAe,CAACsB,eAAD,CAAf;AACAH,IAAAA,KAAK;AACR,GAXD;;AAaA,sBACI,QAAC,IAAD;AAAM,IAAA,SAAS,EAAC,wBAAhB;AAAA,4BACI,QAAC,IAAD,CAAM,IAAN;AAAA,8BACI,QAAC,QAAD;AAAU,QAAA,SAAS,EAAC,WAApB;AAAgC,QAAA,KAAK,EAAC,KAAtC;AAAA,gCACI,QAAC,QAAD,CAAU,MAAV;AAAiB,UAAA,EAAE,EAAC,GAApB;AAAwB,UAAA,SAAS,EAAC,0BAAlC;AAAA,iCACI;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,QAAD,CAAU,IAAV;AAAA,kCACI,QAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII,QAAC,QAAD,CAAU,OAAV;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI,QAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAcI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACI;AAAI,YAAA,SAAS,EAAC,yBAAd;AAAA,sBAAyCvB,YAAY,CAACH;AAAtD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAG,YAAA,SAAS,EAAC,yBAAb;AAAA,oCACI;AAAG,cAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,oBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAdJ,eAwBI;AAAI,QAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,cAxBJ,EA0BKI,OAAO,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cA1BhB,eA2BI,QAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAAE+B,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,KAAK,EAAE;AAA1B,SAAlB;AAAA,+BACI;AAAI,UAAA,SAAS,EAAC,mBAAd;AAAA,kCACI;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,gBAAf;AAAA,qCACI;AAAM,gBAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,EAMK,CAAC9B,YAAY,IAAI,EAAjB,EAAqB+B,GAArB,CAAyB,CAAC7C,OAAD,EAAU8C,KAAV,KAAoB;AAC1C,gCAAO,QAAC,WAAD;AAAoC,cAAA,OAAO,EAAE9C,OAA7C;AAAsD,cAAA,MAAM,EAAEC;AAA9D,eAAkB6C,KAAK,CAACC,QAAN,EAAlB;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WAFA,CANL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAyCI;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA,6BACI;AAAM,QAAA,IAAI,EAAC,WAAX;AAAuB,QAAA,EAAE,EAAC,WAA1B;AAAsC,QAAA,QAAQ,EAAElB,YAAY,CAACM,eAAD,CAA5D;AAAA,+BACI,QAAC,GAAD;AAAA,kCACI,QAAC,GAAD;AAAA,mCACI,QAAC,SAAD;AACI,cAAA,IAAI,EAAC,MADT;AAEI,cAAA,IAAI,EAAC,YAFT;AAGI,cAAA,WAAW,EAAC,kBAHhB;AAII,cAAA,QAAQ,EAAEL,QAJd;AAMI,cAAA,MAAM,EAAEG,MANZ;AAOI,cAAA,OAAO,EAAEF;AAPb,eAKQ,YALR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAYI,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,MAAR;AAAA,mCACI;AACI,cAAA,IAAI,EAAC,QADT;AAEI,cAAA,SAAS,EAAC,6DAFd;AAAA,sCAII;AAAM,gBAAA,SAAS,EAAC,+BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ,eAKI;AAAG,gBAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,sBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAzCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsEH,CApID;;GAAMrB,Q;UAuCcxB,O;;;MAvCdwB,Q;AAsIN,eAAeA,QAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport { FormInput } from '../../../components/form';\nimport Loader from '../../../components/Loader';\n\n// types\nimport { ChatMessage, ChatUser } from './types';\n\n// dummy data\nimport { messages } from './data';\n\n// images\nimport avatar1 from '../../../assets/images/users/user-1.jpg';\n\nconst UserMessage = ({ message, toUser }: { message: ChatMessage; toUser: ChatUser }) => {\n    return (\n        <li className={classnames('clearfix', { odd: message.from.id === toUser.id })}>\n            <div className=\"message-list\">\n                {message.from.avatar ? (\n                    <div className=\"chat-avatar\">\n                        <img src={message.from.avatar} alt=\"\" />\n                    </div>\n                ) : (\n                    <div className=\"chat-avatar\">\n                        <span\n                            className={classnames(\n                                'd-flex',\n                                'align-items-center',\n                                'justify-content-center',\n                                'avatar-sm',\n                                'rounded-circle',\n                                'bg-soft-' + message.from.variant,\n                                'text-' + message.from.variant\n                            )}\n                        >\n                            <i className={classnames(message.from.icon)}></i>\n                        </span>\n                    </div>\n                )}\n\n                <div className=\"conversation-text\">\n                    <div className=\"ctext-wrap\">\n                        <i>{message.from.name}</i>\n                        <p>{message.message}</p>\n                    </div>\n                    <span className=\"time\">{message.sendOn}</span>\n                </div>\n            </div>\n        </li>\n    );\n};\n\ntype ChatAreaProps = {\n    selectedUser: ChatUser;\n};\n\n// ChatArea\nconst ChatArea = ({ selectedUser }: ChatAreaProps) => {\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const [userMessages, setUserMessages] = useState<ChatMessage[]>([]);\n    const [toUser] = useState<ChatUser>({\n        id: 9,\n        name: 'Geneva M',\n        avatar: avatar1,\n    });\n\n    // Fetches the messages for selected user\n    const getMessagesForUser = useCallback(() => {\n        if (selectedUser) {\n            setLoading(true);\n            setTimeout(() => {\n                setUserMessages(\n                    [...messages].filter(\n                        (m) =>\n                            (m.to.id === toUser.id && m.from.id === selectedUser.id) ||\n                            (toUser.id === m.from.id && m.to.id === selectedUser.id)\n                    )\n                );\n                setLoading(false);\n            }, 750);\n        }\n    }, [selectedUser, toUser]);\n\n    useEffect(() => {\n        getMessagesForUser();\n    }, [getMessagesForUser]);\n\n    // form validation schema\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            newMessage: yup.string().required('Please enter your messsage'),\n        })\n    );\n\n    // form methods\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n        reset,\n    } = methods;\n\n    // sends the chat message\n    const sendChatMessage = (data: { [x: string]: string }) => {\n        let newUserMessages = [...userMessages];\n        newUserMessages.push({\n            id: userMessages.length + 1,\n            from: toUser,\n            to: selectedUser,\n            message: data['newMessage'],\n            sendOn: new Date().getHours() + ':' + new Date().getMinutes(),\n        });\n        setUserMessages(newUserMessages);\n        reset();\n    };\n\n    return (\n        <Card className=\"conversation-list-card\">\n            <Card.Body>\n                <Dropdown className=\"float-end\" align=\"end\">\n                    <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                        <i className=\"mdi mdi-dots-vertical\"></i>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Action</Dropdown.Item>\n                        <Dropdown.Item>Anothther Action</Dropdown.Item>\n                        <Dropdown.Item>Something Else</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item>Separated link</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n\n                <div className=\"d-flex\">\n                    <div className=\"flex-grow-1\">\n                        <h5 className=\"mt-0 mb-1 text-truncate\">{selectedUser.name}</h5>\n                        <p className=\"font-13 text-muted mb-0\">\n                            <i className=\"mdi mdi-circle text-success me-1 font-11\"></i>\n                            Active\n                        </p>\n                    </div>\n                </div>\n\n                <hr className=\"my-3\" />\n\n                {loading && <Loader />}\n                <SimpleBar style={{ height: '410px', width: '100%' }}>\n                    <ul className=\"conversation-list\">\n                        <li>\n                            <div className=\"chat-day-title\">\n                                <span className=\"title\">Today</span>\n                            </div>\n                        </li>\n                        {(userMessages || []).map((message, index) => {\n                            return <UserMessage key={index.toString()} message={message} toUser={toUser} />;\n                        })}\n                    </ul>\n                </SimpleBar>\n            </Card.Body>\n            <div className=\"p-3 conversation-input border-top\">\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(sendChatMessage)}>\n                    <Row>\n                        <Col>\n                            <FormInput\n                                type=\"text\"\n                                name=\"newMessage\"\n                                placeholder=\"Enter Message...\"\n                                register={register}\n                                key=\"newMessage\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary chat-send width-md waves-effect waves-light\"\n                            >\n                                <span className=\"d-none d-sm-inline-block me-2\">Send</span>\n                                <i className=\"mdi mdi-send\"></i>\n                            </button>\n                        </Col>\n                    </Row>\n                </form>\n            </div>\n        </Card>\n    );\n};\n\nexport default ChatArea;\n"]},"metadata":{},"sourceType":"module"}