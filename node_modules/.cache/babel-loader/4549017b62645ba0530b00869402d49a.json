{"ast":null,"code":"import _toConsumableArray from\"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useCallback,useEffect,useState}from'react';import{useForm}from'react-hook-form';import{Card,Dropdown,Row,Col}from'react-bootstrap';import classnames from'classnames';import SimpleBar from'simplebar-react';import*as yup from'yup';import{yupResolver}from'@hookform/resolvers/yup';// components\nimport{FormInput}from'../../../components/form';import Loader from'../../../components/Loader';// types\n// dummy data\nimport{messages}from'./data';// images\nimport avatar1 from'../../../assets/images/users/user-1.jpg';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var UserMessage=function UserMessage(_ref){var message=_ref.message,toUser=_ref.toUser;return/*#__PURE__*/_jsx(\"li\",{className:classnames('clearfix',{odd:message.from.id===toUser.id}),children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-list\",children:[message.from.avatar?/*#__PURE__*/_jsx(\"div\",{className:\"chat-avatar\",children:/*#__PURE__*/_jsx(\"img\",{src:message.from.avatar,alt:\"\"})}):/*#__PURE__*/_jsx(\"div\",{className:\"chat-avatar\",children:/*#__PURE__*/_jsx(\"span\",{className:classnames('d-flex','align-items-center','justify-content-center','avatar-sm','rounded-circle','bg-soft-'+message.from.variant,'text-'+message.from.variant),children:/*#__PURE__*/_jsx(\"i\",{className:classnames(message.from.icon)})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"conversation-text\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"ctext-wrap\",children:[/*#__PURE__*/_jsx(\"i\",{children:message.from.name}),/*#__PURE__*/_jsx(\"p\",{children:message.message})]}),/*#__PURE__*/_jsx(\"span\",{className:\"time\",children:message.sendOn})]})]})});};// ChatArea\nvar ChatArea=function ChatArea(_ref2){var selectedUser=_ref2.selectedUser;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),userMessages=_useState4[0],setUserMessages=_useState4[1];var _useState5=useState({id:9,name:'Geneva M',avatar:avatar1}),_useState6=_slicedToArray(_useState5,1),toUser=_useState6[0];// Fetches the messages for selected user\nvar getMessagesForUser=useCallback(function(){if(selectedUser){setLoading(true);setTimeout(function(){setUserMessages(_toConsumableArray(messages).filter(function(m){return m.to.id===toUser.id&&m.from.id===selectedUser.id||toUser.id===m.from.id&&m.to.id===selectedUser.id;}));setLoading(false);},750);}},[selectedUser,toUser]);useEffect(function(){getMessagesForUser();},[getMessagesForUser]);// form validation schema\nvar schemaResolver=yupResolver(yup.object().shape({newMessage:yup.string().required('Please enter your messsage')}));// form methods\nvar methods=useForm({resolver:schemaResolver});var handleSubmit=methods.handleSubmit,register=methods.register,control=methods.control,errors=methods.formState.errors,reset=methods.reset;// sends the chat message\nvar sendChatMessage=function sendChatMessage(data){var newUserMessages=_toConsumableArray(userMessages);newUserMessages.push({id:userMessages.length+1,from:toUser,to:selectedUser,message:data['newMessage'],sendOn:new Date().getHours()+':'+new Date().getMinutes()});setUserMessages(newUserMessages);reset();};return/*#__PURE__*/_jsxs(Card,{className:\"conversation-list-card\",children:[/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsxs(Dropdown,{className:\"float-end\",align:\"end\",children:[/*#__PURE__*/_jsx(Dropdown.Toggle,{as:\"a\",className:\"cursor-pointer card-drop\",children:/*#__PURE__*/_jsx(\"i\",{className:\"mdi mdi-dots-vertical\"})}),/*#__PURE__*/_jsxs(Dropdown.Menu,{children:[/*#__PURE__*/_jsx(Dropdown.Item,{children:\"Action\"}),/*#__PURE__*/_jsx(Dropdown.Item,{children:\"Anothther Action\"}),/*#__PURE__*/_jsx(Dropdown.Item,{children:\"Something Else\"}),/*#__PURE__*/_jsx(Dropdown.Divider,{}),/*#__PURE__*/_jsx(Dropdown.Item,{children:\"Separated link\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"d-flex\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex-grow-1\",children:[/*#__PURE__*/_jsx(\"h5\",{className:\"mt-0 mb-1 text-truncate\",children:selectedUser.name}),/*#__PURE__*/_jsxs(\"p\",{className:\"font-13 text-muted mb-0\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"mdi mdi-circle text-success me-1 font-11\"}),\"Active\"]})]})}),/*#__PURE__*/_jsx(\"hr\",{className:\"my-3\"}),loading&&/*#__PURE__*/_jsx(Loader,{}),/*#__PURE__*/_jsx(SimpleBar,{style:{height:'410px',width:'100%'},children:/*#__PURE__*/_jsxs(\"ul\",{className:\"conversation-list\",children:[/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"div\",{className:\"chat-day-title\",children:/*#__PURE__*/_jsx(\"span\",{className:\"title\",children:\"Today\"})})}),(userMessages||[]).map(function(message,index){return/*#__PURE__*/_jsx(UserMessage,{message:message,toUser:toUser},index.toString());})]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"p-3 conversation-input border-top\",children:/*#__PURE__*/_jsx(\"form\",{name:\"chat-form\",id:\"chat-form\",onSubmit:handleSubmit(sendChatMessage),children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(FormInput,{type:\"text\",name:\"newMessage\",placeholder:\"Enter Message...\",register:register,errors:errors,control:control},\"newMessage\")}),/*#__PURE__*/_jsx(Col,{xs:\"auto\",children:/*#__PURE__*/_jsxs(\"button\",{type:\"submit\",className:\"btn btn-primary chat-send width-md waves-effect waves-light\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"d-none d-sm-inline-block me-2\",children:\"Send\"}),/*#__PURE__*/_jsx(\"i\",{className:\"mdi mdi-send\"})]})})]})})})]});};export default ChatArea;","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/pages/apps/Chat/ChatArea.tsx"],"names":["useCallback","useEffect","useState","useForm","Card","Dropdown","Row","Col","classnames","SimpleBar","yup","yupResolver","FormInput","Loader","messages","avatar1","UserMessage","message","toUser","odd","from","id","avatar","variant","icon","name","sendOn","ChatArea","selectedUser","loading","setLoading","userMessages","setUserMessages","getMessagesForUser","setTimeout","filter","m","to","schemaResolver","object","shape","newMessage","string","required","methods","resolver","handleSubmit","register","control","errors","formState","reset","sendChatMessage","data","newUserMessages","push","length","Date","getHours","getMinutes","height","width","map","index","toString"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport { FormInput } from '../../../components/form';\nimport Loader from '../../../components/Loader';\n\n// types\nimport { ChatMessage, ChatUser } from './types';\n\n// dummy data\nimport { messages } from './data';\n\n// images\nimport avatar1 from '../../../assets/images/users/user-1.jpg';\n\nconst UserMessage = ({ message, toUser }: { message: ChatMessage; toUser: ChatUser }) => {\n    return (\n        <li className={classnames('clearfix', { odd: message.from.id === toUser.id })}>\n            <div className=\"message-list\">\n                {message.from.avatar ? (\n                    <div className=\"chat-avatar\">\n                        <img src={message.from.avatar} alt=\"\" />\n                    </div>\n                ) : (\n                    <div className=\"chat-avatar\">\n                        <span\n                            className={classnames(\n                                'd-flex',\n                                'align-items-center',\n                                'justify-content-center',\n                                'avatar-sm',\n                                'rounded-circle',\n                                'bg-soft-' + message.from.variant,\n                                'text-' + message.from.variant\n                            )}\n                        >\n                            <i className={classnames(message.from.icon)}></i>\n                        </span>\n                    </div>\n                )}\n\n                <div className=\"conversation-text\">\n                    <div className=\"ctext-wrap\">\n                        <i>{message.from.name}</i>\n                        <p>{message.message}</p>\n                    </div>\n                    <span className=\"time\">{message.sendOn}</span>\n                </div>\n            </div>\n        </li>\n    );\n};\n\ntype ChatAreaProps = {\n    selectedUser: ChatUser;\n};\n\n// ChatArea\nconst ChatArea = ({ selectedUser }: ChatAreaProps) => {\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const [userMessages, setUserMessages] = useState<ChatMessage[]>([]);\n    const [toUser] = useState<ChatUser>({\n        id: 9,\n        name: 'Geneva M',\n        avatar: avatar1,\n    });\n\n    // Fetches the messages for selected user\n    const getMessagesForUser = useCallback(() => {\n        if (selectedUser) {\n            setLoading(true);\n            setTimeout(() => {\n                setUserMessages(\n                    [...messages].filter(\n                        (m) =>\n                            (m.to.id === toUser.id && m.from.id === selectedUser.id) ||\n                            (toUser.id === m.from.id && m.to.id === selectedUser.id)\n                    )\n                );\n                setLoading(false);\n            }, 750);\n        }\n    }, [selectedUser, toUser]);\n\n    useEffect(() => {\n        getMessagesForUser();\n    }, [getMessagesForUser]);\n\n    // form validation schema\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            newMessage: yup.string().required('Please enter your messsage'),\n        })\n    );\n\n    // form methods\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n        reset,\n    } = methods;\n\n    // sends the chat message\n    const sendChatMessage = (data: { [x: string]: string }) => {\n        let newUserMessages = [...userMessages];\n        newUserMessages.push({\n            id: userMessages.length + 1,\n            from: toUser,\n            to: selectedUser,\n            message: data['newMessage'],\n            sendOn: new Date().getHours() + ':' + new Date().getMinutes(),\n        });\n        setUserMessages(newUserMessages);\n        reset();\n    };\n\n    return (\n        <Card className=\"conversation-list-card\">\n            <Card.Body>\n                <Dropdown className=\"float-end\" align=\"end\">\n                    <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                        <i className=\"mdi mdi-dots-vertical\"></i>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Action</Dropdown.Item>\n                        <Dropdown.Item>Anothther Action</Dropdown.Item>\n                        <Dropdown.Item>Something Else</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item>Separated link</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n\n                <div className=\"d-flex\">\n                    <div className=\"flex-grow-1\">\n                        <h5 className=\"mt-0 mb-1 text-truncate\">{selectedUser.name}</h5>\n                        <p className=\"font-13 text-muted mb-0\">\n                            <i className=\"mdi mdi-circle text-success me-1 font-11\"></i>\n                            Active\n                        </p>\n                    </div>\n                </div>\n\n                <hr className=\"my-3\" />\n\n                {loading && <Loader />}\n                <SimpleBar style={{ height: '410px', width: '100%' }}>\n                    <ul className=\"conversation-list\">\n                        <li>\n                            <div className=\"chat-day-title\">\n                                <span className=\"title\">Today</span>\n                            </div>\n                        </li>\n                        {(userMessages || []).map((message, index) => {\n                            return <UserMessage key={index.toString()} message={message} toUser={toUser} />;\n                        })}\n                    </ul>\n                </SimpleBar>\n            </Card.Body>\n            <div className=\"p-3 conversation-input border-top\">\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(sendChatMessage)}>\n                    <Row>\n                        <Col>\n                            <FormInput\n                                type=\"text\"\n                                name=\"newMessage\"\n                                placeholder=\"Enter Message...\"\n                                register={register}\n                                key=\"newMessage\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary chat-send width-md waves-effect waves-light\"\n                            >\n                                <span className=\"d-none d-sm-inline-block me-2\">Send</span>\n                                <i className=\"mdi mdi-send\"></i>\n                            </button>\n                        </Col>\n                    </Row>\n                </form>\n            </div>\n        </Card>\n    );\n};\n\nexport default ChatArea;\n"]},"metadata":{},"sourceType":"module"}