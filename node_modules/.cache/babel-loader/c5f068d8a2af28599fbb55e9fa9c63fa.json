{"ast":null,"code":"var groupByFields=function groupByFields(array,f){/*\n    params description :\n        f : function which returnf the array of fields \n        e.g. :  (item) => {\n            return [itemField1, itemField2];\n        }\n        array : array of data to group e.g. : [{...}, {...}]       \n    */var groups={};array.forEach(function(o){var group=JSON.stringify(f(o));groups[group]=groups[group]||[];groups[group].push(o);});return Object.keys(groups).map(function(group){return groups[group];});};/**\n * split array into chunks\n * @param array - array to split\n * @param chunkSize - chunk size\n * @returns\n */var splitArray=function splitArray(array,chunkSize){var chunks=Array(Math.ceil(array.length/chunkSize)).fill(1).map(function(_,index){return index*chunkSize;}).map(function(begin){return array.slice(begin,begin+chunkSize);});return chunks;};export{groupByFields,splitArray};","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/utils/array.ts"],"names":["groupByFields","array","f","groups","forEach","o","group","JSON","stringify","push","Object","keys","map","splitArray","chunkSize","chunks","Array","Math","ceil","length","fill","_","index","begin","slice"],"mappings":"AAAA,GAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAoBC,CAApB,CAA2C,CAC7D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MACI,GAAIC,CAAAA,MAAgC,CAAG,EAAvC,CACAF,KAAK,CAACG,OAAN,CAAc,SAACC,CAAD,CAAO,CACjB,GAAIC,CAAAA,KAAK,CAAGC,IAAI,CAACC,SAAL,CAAeN,CAAC,CAACG,CAAD,CAAhB,CAAZ,CACAF,MAAM,CAACG,KAAD,CAAN,CAAgBH,MAAM,CAACG,KAAD,CAAN,EAAiB,EAAjC,CACAH,MAAM,CAACG,KAAD,CAAN,CAAcG,IAAd,CAAmBJ,CAAnB,EACH,CAJD,EAMA,MAAOK,CAAAA,MAAM,CAACC,IAAP,CAAYR,MAAZ,EAAoBS,GAApB,CAAwB,SAACN,KAAD,CAAW,CACtC,MAAOH,CAAAA,MAAM,CAACG,KAAD,CAAb,CACH,CAFM,CAAP,CAGH,CAnBD,CAqBA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMO,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACZ,KAAD,CAAoBa,SAApB,CAA0C,CACzD,GAAMC,CAAAA,MAAM,CAAGC,KAAK,CAACC,IAAI,CAACC,IAAL,CAAUjB,KAAK,CAACkB,MAAN,CAAeL,SAAzB,CAAD,CAAL,CACVM,IADU,CACL,CADK,EAEVR,GAFU,CAEN,SAACS,CAAD,CAAIC,KAAJ,QAAcA,CAAAA,KAAK,CAAGR,SAAtB,EAFM,EAGVF,GAHU,CAGN,SAACW,KAAD,QAAWtB,CAAAA,KAAK,CAACuB,KAAN,CAAYD,KAAZ,CAAmBA,KAAK,CAAGT,SAA3B,CAAX,EAHM,CAAf,CAIA,MAAOC,CAAAA,MAAP,CACH,CAND,CAQA,OAASf,aAAT,CAAwBa,UAAxB","sourcesContent":["const groupByFields = (array: Array<any>, f: any): Array<any> => {\n    /*\n    params description :\n        f : function which returnf the array of fields \n        e.g. :  (item) => {\n            return [itemField1, itemField2];\n        }\n        array : array of data to group e.g. : [{...}, {...}]       \n    */\n    var groups: { [key: string]: any[] } = {};\n    array.forEach((o) => {\n        var group = JSON.stringify(f(o));\n        groups[group] = groups[group] || [];\n        groups[group].push(o);\n    });\n\n    return Object.keys(groups).map((group) => {\n        return groups[group];\n    });\n};\n\n/**\n * split array into chunks\n * @param array - array to split\n * @param chunkSize - chunk size\n * @returns\n */\nconst splitArray = (array: Array<any>, chunkSize: number) => {\n    const chunks = Array(Math.ceil(array.length / chunkSize))\n        .fill(1)\n        .map((_, index) => index * chunkSize)\n        .map((begin) => array.slice(begin, begin + chunkSize));\n    return chunks;\n};\n\nexport { groupByFields, splitArray };\n"]},"metadata":{},"sourceType":"module"}