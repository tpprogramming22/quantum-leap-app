{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/components/ThemeCustomizer/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Alert, Button } from 'react-bootstrap'; // actions\n\nimport { changeLayout, changeLayoutColor, changeLayoutWidth, changeMenuPositions, changeSidebarTheme, changeSidebarType, toggleSidebarUserInfo, changeTopbarTheme } from '../../redux/actions'; // constants\n\nimport * as layoutConstants from '../../constants/layout'; // custom hook\n\nimport { useViewport, useRedux } from '../../hooks/'; // components\n\nimport LayoutTypes from './LayoutTypes';\nimport LayoutColor from './LayoutColor';\nimport LayoutWidth from './LayoutWidth';\nimport MenuPositions from './MenuPositions';\nimport LeftSideBarTheme from './LeftSideBarTheme';\nimport LeftSideBarType from './LeftSideBarType';\nimport SidebarUserInfo from './SidebarUserInfo';\nimport TopbarTheme from './TopbarTheme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThemeCustomizer = () => {\n  _s();\n\n  const {\n    dispatch,\n    appSelector\n  } = useRedux();\n  const {\n    width\n  } = useViewport();\n  const {\n    layoutColor,\n    layoutType,\n    layoutWidth,\n    menuPosition,\n    leftSideBarType,\n    leftSideBarTheme,\n    showSidebarUserInfo,\n    topbarTheme\n  } = appSelector(state => ({\n    layoutColor: state.Layout.layoutColor,\n    layoutType: state.Layout.layoutType,\n    layoutWidth: state.Layout.layoutWidth,\n    menuPosition: state.Layout.menuPosition,\n    leftSideBarTheme: state.Layout.leftSideBarTheme,\n    leftSideBarType: state.Layout.leftSideBarType,\n    showSidebarUserInfo: state.Layout.showSidebarUserInfo,\n    topbarTheme: state.Layout.topbarTheme\n  }));\n  const [disableTopbarTheme, setDisableTopbarTheme] = useState(false);\n  const [disableSidebarTheme, setDisableSidebarTheme] = useState(false);\n  const [disableSidebarType, setDisableSidebarType] = useState(false);\n  const [disableSidebarUser, setDisableSidebarUser] = useState(false);\n  /**\n   * change state based on props changes\n   */\n\n  const _loadStateFromProps = useCallback(() => {\n    setDisableTopbarTheme(layoutColor !== layoutConstants.LayoutColor.LAYOUT_COLOR_DARK);\n    setDisableSidebarTheme(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n    setDisableSidebarType(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL && width > 991);\n    setDisableSidebarUser(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n  }, [layoutColor, layoutType, width]);\n\n  useEffect(() => {\n    _loadStateFromProps();\n  }, [_loadStateFromProps]);\n  /**\n   * On layout change\n   */\n\n  const changeLayoutType = value => {\n    var layout = value;\n\n    switch (layout) {\n      case 'horizontal':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n        break;\n\n      default:\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n        break;\n    }\n  };\n  /**\n   * Change the layout color\n   */\n\n\n  const changeLayoutColorScheme = value => {\n    var mode = value;\n\n    switch (mode) {\n      case 'dark':\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\n        break;\n\n      default:\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\n        break;\n    }\n  };\n  /**\n   * Change the width mode\n   */\n\n\n  const changeWidthMode = value => {\n    var mode = value;\n\n    switch (mode) {\n      case 'boxed':\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\n        break;\n\n      default:\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\n        break;\n    }\n  };\n  /*\n   * Change menus position\n   */\n\n\n  const changeMenuPosition = value => {\n    var position = value;\n\n    switch (position) {\n      case 'scrollable':\n        dispatch(changeMenuPositions(layoutConstants.MenuPositions.MENU_POSITION_SCROLLABLE));\n        break;\n\n      default:\n        dispatch(changeMenuPositions(layoutConstants.MenuPositions.MENU_POSITION_FIXED));\n        break;\n    }\n  };\n  /**\n   * Changes the theme\n   */\n\n\n  const changeLeftSidebarTheme = value => {\n    var theme = value;\n\n    switch (theme) {\n      case 'dark':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\n        break;\n\n      case 'brand':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_BRAND));\n        break;\n\n      case 'gradient':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_GRADIENT));\n        break;\n\n      default:\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\n        break;\n    }\n  };\n  /**\n   * Change the leftsiderbar type\n   */\n\n\n  const changeLeftSiderbarType = value => {\n    var type = value;\n\n    switch (type) {\n      case 'condensed':\n        dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\n        break;\n\n      case 'compact':\n        dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_COMPACT));\n        break;\n\n      default:\n        dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n        break;\n    }\n  };\n  /*\n   * Toggle the leftsidebar use info\n   */\n\n\n  const toggleLeftSidebarUserInfo = value => {\n    var checked = value;\n    dispatch(toggleSidebarUserInfo(checked));\n  };\n  /*\n   * Change topbar theme\n   */\n\n\n  const changeTopBarTheme = value => {\n    var theme = value;\n\n    switch (theme) {\n      case 'light':\n        dispatch(changeTopbarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_LIGHT));\n        break;\n\n      default:\n        dispatch(changeTopbarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_DARK));\n        break;\n    }\n  };\n  /**\n   * Reset everything\n   */\n\n\n  const reset = () => {\n    changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_VERTICAL);\n    changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\n    changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\n    changeMenuPosition(layoutConstants.MenuPositions.MENU_POSITION_FIXED);\n    changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT);\n    toggleLeftSidebarUserInfo(true);\n    changeTopBarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_LIGHT);\n    changeLeftSiderbarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-3\",\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"warning\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Customize \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), \" the overall color scheme, Layout, etc.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LayoutTypes, {\n      changeLayoutType: changeLayoutType,\n      layoutType: layoutType,\n      layoutConstants: layoutConstants.LayoutTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LayoutColor, {\n      changeLayoutColorScheme: changeLayoutColorScheme,\n      layoutColor: layoutColor,\n      layoutConstants: layoutConstants.LayoutColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LayoutWidth, {\n      changeWidthMode: changeWidthMode,\n      layoutWidth: layoutWidth,\n      layoutConstants: layoutConstants.LayoutWidth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MenuPositions, {\n      menuPosition: menuPosition,\n      changeMenuPosition: changeMenuPosition,\n      layoutConstants: layoutConstants.MenuPositions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), disableSidebarTheme && /*#__PURE__*/_jsxDEV(LeftSideBarTheme, {\n      changeLeftSidebarTheme: changeLeftSidebarTheme,\n      leftSideBarTheme: leftSideBarTheme,\n      layoutConstants: layoutConstants.SideBarTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }, this), disableSidebarType && /*#__PURE__*/_jsxDEV(LeftSideBarType, {\n      changeLeftSiderbarType: changeLeftSiderbarType,\n      leftSideBarType: leftSideBarType,\n      layoutConstants: layoutConstants.SideBarTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 17\n    }, this), disableSidebarUser && /*#__PURE__*/_jsxDEV(SidebarUserInfo, {\n      toggleLeftSidebarUserInfo: toggleLeftSidebarUserInfo,\n      showSidebarUserInfo: showSidebarUserInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }, this), disableTopbarTheme && /*#__PURE__*/_jsxDEV(TopbarTheme, {\n      changeTopBarTheme: changeTopBarTheme,\n      topbarTheme: topbarTheme,\n      layoutConstants: layoutConstants.TopbarTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-grid mt-4\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        id: \"resetBtn\",\n        onClick: () => reset(),\n        children: \"Reset to Default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThemeCustomizer, \"MmrvQAXwTLsm+wPO6vIeKIexO/M=\", false, function () {\n  return [useRedux, useViewport];\n});\n\n_c = ThemeCustomizer;\nexport default ThemeCustomizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeCustomizer\");","map":{"version":3,"sources":["/Users/ted/Downloads/Adminto_React_v1.1/adminto-react/src/components/ThemeCustomizer/index.tsx"],"names":["useState","useEffect","useCallback","Alert","Button","changeLayout","changeLayoutColor","changeLayoutWidth","changeMenuPositions","changeSidebarTheme","changeSidebarType","toggleSidebarUserInfo","changeTopbarTheme","layoutConstants","useViewport","useRedux","LayoutTypes","LayoutColor","LayoutWidth","MenuPositions","LeftSideBarTheme","LeftSideBarType","SidebarUserInfo","TopbarTheme","ThemeCustomizer","dispatch","appSelector","width","layoutColor","layoutType","layoutWidth","menuPosition","leftSideBarType","leftSideBarTheme","showSidebarUserInfo","topbarTheme","state","Layout","disableTopbarTheme","setDisableTopbarTheme","disableSidebarTheme","setDisableSidebarTheme","disableSidebarType","setDisableSidebarType","disableSidebarUser","setDisableSidebarUser","_loadStateFromProps","LAYOUT_COLOR_DARK","LAYOUT_HORIZONTAL","changeLayoutType","value","layout","LAYOUT_VERTICAL","changeLayoutColorScheme","mode","LAYOUT_COLOR_LIGHT","changeWidthMode","LAYOUT_WIDTH_BOXED","LAYOUT_WIDTH_FLUID","changeMenuPosition","position","MENU_POSITION_SCROLLABLE","MENU_POSITION_FIXED","changeLeftSidebarTheme","theme","SideBarTheme","LEFT_SIDEBAR_THEME_DARK","LEFT_SIDEBAR_THEME_BRAND","LEFT_SIDEBAR_THEME_GRADIENT","LEFT_SIDEBAR_THEME_LIGHT","changeLeftSiderbarType","type","SideBarTypes","LEFT_SIDEBAR_TYPE_CONDENSED","LEFT_SIDEBAR_TYPE_COMPACT","LEFT_SIDEBAR_TYPE_DEFAULT","toggleLeftSidebarUserInfo","checked","changeTopBarTheme","TOPBAR_THEME_LIGHT","TOPBAR_THEME_DARK","reset"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B,C,CAEA;;AACA,SACIC,YADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,EAIIC,mBAJJ,EAKIC,kBALJ,EAMIC,iBANJ,EAOIC,qBAPJ,EAQIC,iBARJ,QASO,qBATP,C,CAWA;;AACA,OAAO,KAAKC,eAAZ,MAAiC,wBAAjC,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,cAAtC,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BX,QAAQ,EAA1C;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAYb,WAAW,EAA7B;AAEA,QAAM;AACFc,IAAAA,WADE;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,YAJE;AAKFC,IAAAA,eALE;AAMFC,IAAAA,gBANE;AAOFC,IAAAA,mBAPE;AAQFC,IAAAA;AARE,MASFT,WAAW,CAAEU,KAAD,KAAY;AACxBR,IAAAA,WAAW,EAAEQ,KAAK,CAACC,MAAN,CAAaT,WADF;AAExBC,IAAAA,UAAU,EAAEO,KAAK,CAACC,MAAN,CAAaR,UAFD;AAGxBC,IAAAA,WAAW,EAAEM,KAAK,CAACC,MAAN,CAAaP,WAHF;AAIxBC,IAAAA,YAAY,EAAEK,KAAK,CAACC,MAAN,CAAaN,YAJH;AAKxBE,IAAAA,gBAAgB,EAAEG,KAAK,CAACC,MAAN,CAAaJ,gBALP;AAMxBD,IAAAA,eAAe,EAAEI,KAAK,CAACC,MAAN,CAAaL,eANN;AAOxBE,IAAAA,mBAAmB,EAAEE,KAAK,CAACC,MAAN,CAAaH,mBAPV;AAQxBC,IAAAA,WAAW,EAAEC,KAAK,CAACC,MAAN,CAAaF;AARF,GAAZ,CAAD,CATf;AAoBA,QAAM,CAACG,kBAAD,EAAqBC,qBAArB,IAA8CvC,QAAQ,CAAU,KAAV,CAA5D;AACA,QAAM,CAACwC,mBAAD,EAAsBC,sBAAtB,IAAgDzC,QAAQ,CAAU,KAAV,CAA9D;AACA,QAAM,CAAC0C,kBAAD,EAAqBC,qBAArB,IAA8C3C,QAAQ,CAAU,KAAV,CAA5D;AACA,QAAM,CAAC4C,kBAAD,EAAqBC,qBAArB,IAA8C7C,QAAQ,CAAU,KAAV,CAA5D;AAEA;AACJ;AACA;;AACI,QAAM8C,mBAAmB,GAAG5C,WAAW,CAAC,MAAM;AAC1CqC,IAAAA,qBAAqB,CAACX,WAAW,KAAKf,eAAe,CAACI,WAAhB,CAA4B8B,iBAA7C,CAArB;AACAN,IAAAA,sBAAsB,CAACZ,UAAU,KAAKhB,eAAe,CAACG,WAAhB,CAA4BgC,iBAA5C,CAAtB;AACAL,IAAAA,qBAAqB,CAACd,UAAU,KAAKhB,eAAe,CAACG,WAAhB,CAA4BgC,iBAA3C,IAAgErB,KAAK,GAAG,GAAzE,CAArB;AACAkB,IAAAA,qBAAqB,CAAChB,UAAU,KAAKhB,eAAe,CAACG,WAAhB,CAA4BgC,iBAA5C,CAArB;AACH,GALsC,EAKpC,CAACpB,WAAD,EAAcC,UAAd,EAA0BF,KAA1B,CALoC,CAAvC;;AAOA1B,EAAAA,SAAS,CAAC,MAAM;AACZ6C,IAAAA,mBAAmB;AACtB,GAFQ,EAEN,CAACA,mBAAD,CAFM,CAAT;AAIA;AACJ;AACA;;AACI,QAAMG,gBAAgB,GAAIC,KAAD,IAAmB;AACxC,QAAIC,MAAM,GAAGD,KAAb;;AACA,YAAQC,MAAR;AACI,WAAK,YAAL;AACI1B,QAAAA,QAAQ,CAACpB,YAAY,CAACQ,eAAe,CAACG,WAAhB,CAA4BgC,iBAA7B,CAAb,CAAR;AACA;;AACJ;AACIvB,QAAAA,QAAQ,CAACpB,YAAY,CAACQ,eAAe,CAACG,WAAhB,CAA4BoC,eAA7B,CAAb,CAAR;AACA;AANR;AAQH,GAVD;AAYA;AACJ;AACA;;;AACI,QAAMC,uBAAuB,GAAIH,KAAD,IAAmB;AAC/C,QAAII,IAAI,GAAGJ,KAAX;;AAEA,YAAQI,IAAR;AACI,WAAK,MAAL;AACI7B,QAAAA,QAAQ,CAACnB,iBAAiB,CAACO,eAAe,CAACI,WAAhB,CAA4B8B,iBAA7B,CAAlB,CAAR;AACA;;AACJ;AACItB,QAAAA,QAAQ,CAACnB,iBAAiB,CAACO,eAAe,CAACI,WAAhB,CAA4BsC,kBAA7B,CAAlB,CAAR;AACA;AANR;AAQH,GAXD;AAaA;AACJ;AACA;;;AACI,QAAMC,eAAe,GAAIN,KAAD,IAAmB;AACvC,QAAII,IAAI,GAAGJ,KAAX;;AAEA,YAAQI,IAAR;AACI,WAAK,OAAL;AACI7B,QAAAA,QAAQ,CAAClB,iBAAiB,CAACM,eAAe,CAACK,WAAhB,CAA4BuC,kBAA7B,CAAlB,CAAR;AACA;;AACJ;AACIhC,QAAAA,QAAQ,CAAClB,iBAAiB,CAACM,eAAe,CAACK,WAAhB,CAA4BwC,kBAA7B,CAAlB,CAAR;AACA;AANR;AAQH,GAXD;AAaA;AACJ;AACA;;;AACI,QAAMC,kBAAkB,GAAIT,KAAD,IAAmB;AAC1C,QAAIU,QAAQ,GAAGV,KAAf;;AAEA,YAAQU,QAAR;AACI,WAAK,YAAL;AACInC,QAAAA,QAAQ,CAACjB,mBAAmB,CAACK,eAAe,CAACM,aAAhB,CAA8B0C,wBAA/B,CAApB,CAAR;AACA;;AACJ;AACIpC,QAAAA,QAAQ,CAACjB,mBAAmB,CAACK,eAAe,CAACM,aAAhB,CAA8B2C,mBAA/B,CAApB,CAAR;AACA;AANR;AAQH,GAXD;AAaA;AACJ;AACA;;;AACI,QAAMC,sBAAsB,GAAIb,KAAD,IAAmB;AAC9C,QAAIc,KAAK,GAAGd,KAAZ;;AACA,YAAQc,KAAR;AACI,WAAK,MAAL;AACIvC,QAAAA,QAAQ,CAAChB,kBAAkB,CAACI,eAAe,CAACoD,YAAhB,CAA6BC,uBAA9B,CAAnB,CAAR;AACA;;AACJ,WAAK,OAAL;AACIzC,QAAAA,QAAQ,CAAChB,kBAAkB,CAACI,eAAe,CAACoD,YAAhB,CAA6BE,wBAA9B,CAAnB,CAAR;AACA;;AACJ,WAAK,UAAL;AACI1C,QAAAA,QAAQ,CAAChB,kBAAkB,CAACI,eAAe,CAACoD,YAAhB,CAA6BG,2BAA9B,CAAnB,CAAR;AACA;;AACJ;AACI3C,QAAAA,QAAQ,CAAChB,kBAAkB,CAACI,eAAe,CAACoD,YAAhB,CAA6BI,wBAA9B,CAAnB,CAAR;AACA;AAZR;AAcH,GAhBD;AAkBA;AACJ;AACA;;;AACI,QAAMC,sBAAsB,GAAIpB,KAAD,IAAmB;AAC9C,QAAIqB,IAAI,GAAGrB,KAAX;;AACA,YAAQqB,IAAR;AACI,WAAK,WAAL;AACI9C,QAAAA,QAAQ,CAACf,iBAAiB,CAACG,eAAe,CAAC2D,YAAhB,CAA6BC,2BAA9B,CAAlB,CAAR;AACA;;AACJ,WAAK,SAAL;AACIhD,QAAAA,QAAQ,CAACf,iBAAiB,CAACG,eAAe,CAAC2D,YAAhB,CAA6BE,yBAA9B,CAAlB,CAAR;AACA;;AACJ;AACIjD,QAAAA,QAAQ,CAACf,iBAAiB,CAACG,eAAe,CAAC2D,YAAhB,CAA6BG,yBAA9B,CAAlB,CAAR;AACA;AATR;AAWH,GAbD;AAeA;AACJ;AACA;;;AACI,QAAMC,yBAAyB,GAAI1B,KAAD,IAAoB;AAClD,QAAI2B,OAAO,GAAG3B,KAAd;AACAzB,IAAAA,QAAQ,CAACd,qBAAqB,CAACkE,OAAD,CAAtB,CAAR;AACH,GAHD;AAKA;AACJ;AACA;;;AACI,QAAMC,iBAAiB,GAAI5B,KAAD,IAAmB;AACzC,QAAIc,KAAK,GAAGd,KAAZ;;AACA,YAAQc,KAAR;AACI,WAAK,OAAL;AACIvC,QAAAA,QAAQ,CAACb,iBAAiB,CAACC,eAAe,CAACU,WAAhB,CAA4BwD,kBAA7B,CAAlB,CAAR;AACA;;AACJ;AACItD,QAAAA,QAAQ,CAACb,iBAAiB,CAACC,eAAe,CAACU,WAAhB,CAA4ByD,iBAA7B,CAAlB,CAAR;AACA;AANR;AAQH,GAVD;AAYA;AACJ;AACA;;;AACI,QAAMC,KAAK,GAAG,MAAM;AAChBhC,IAAAA,gBAAgB,CAACpC,eAAe,CAACG,WAAhB,CAA4BoC,eAA7B,CAAhB;AACAC,IAAAA,uBAAuB,CAACxC,eAAe,CAACI,WAAhB,CAA4BsC,kBAA7B,CAAvB;AACAC,IAAAA,eAAe,CAAC3C,eAAe,CAACK,WAAhB,CAA4BwC,kBAA7B,CAAf;AACAC,IAAAA,kBAAkB,CAAC9C,eAAe,CAACM,aAAhB,CAA8B2C,mBAA/B,CAAlB;AACAC,IAAAA,sBAAsB,CAAClD,eAAe,CAACoD,YAAhB,CAA6BI,wBAA9B,CAAtB;AACAO,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACAE,IAAAA,iBAAiB,CAACjE,eAAe,CAACU,WAAhB,CAA4BwD,kBAA7B,CAAjB;AACAT,IAAAA,sBAAsB,CAACzD,eAAe,CAAC2D,YAAhB,CAA6BG,yBAA9B,CAAtB;AACH,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,SAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI,QAAC,WAAD;AACI,MAAA,gBAAgB,EAAE1B,gBADtB;AAEI,MAAA,UAAU,EAAEpB,UAFhB;AAGI,MAAA,eAAe,EAAEhB,eAAe,CAACG;AAHrC;AAAA;AAAA;AAAA;AAAA,YANJ,eAWI,QAAC,WAAD;AACI,MAAA,uBAAuB,EAAEqC,uBAD7B;AAEI,MAAA,WAAW,EAAEzB,WAFjB;AAGI,MAAA,eAAe,EAAEf,eAAe,CAACI;AAHrC;AAAA;AAAA;AAAA;AAAA,YAXJ,eAkBI,QAAC,WAAD;AACI,MAAA,eAAe,EAAEuC,eADrB;AAEI,MAAA,WAAW,EAAE1B,WAFjB;AAGI,MAAA,eAAe,EAAEjB,eAAe,CAACK;AAHrC;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAyBI,QAAC,aAAD;AACI,MAAA,YAAY,EAAEa,YADlB;AAEI,MAAA,kBAAkB,EAAE4B,kBAFxB;AAGI,MAAA,eAAe,EAAE9C,eAAe,CAACM;AAHrC;AAAA;AAAA;AAAA;AAAA,YAzBJ,EAgCKqB,mBAAmB,iBAChB,QAAC,gBAAD;AACI,MAAA,sBAAsB,EAAEuB,sBAD5B;AAEI,MAAA,gBAAgB,EAAE9B,gBAFtB;AAGI,MAAA,eAAe,EAAEpB,eAAe,CAACoD;AAHrC;AAAA;AAAA;AAAA;AAAA,YAjCR,EAyCKvB,kBAAkB,iBACf,QAAC,eAAD;AACI,MAAA,sBAAsB,EAAE4B,sBAD5B;AAEI,MAAA,eAAe,EAAEtC,eAFrB;AAGI,MAAA,eAAe,EAAEnB,eAAe,CAAC2D;AAHrC;AAAA;AAAA;AAAA;AAAA,YA1CR,EAkDK5B,kBAAkB,iBACf,QAAC,eAAD;AACI,MAAA,yBAAyB,EAAEgC,yBAD/B;AAEI,MAAA,mBAAmB,EAAE1C;AAFzB;AAAA;AAAA;AAAA;AAAA,YAnDR,EA0DKI,kBAAkB,iBACf,QAAC,WAAD;AACI,MAAA,iBAAiB,EAAEwC,iBADvB;AAEI,MAAA,WAAW,EAAE3C,WAFjB;AAGI,MAAA,eAAe,EAAEtB,eAAe,CAACU;AAHrC;AAAA;AAAA;AAAA;AAAA,YA3DR,eAkEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAE,MAAM0D,KAAK,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAlEJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0EH,CAhQD;;GAAMzD,e;UACgCT,Q,EAChBD,W;;;KAFhBU,e;AAkQN,eAAeA,eAAf","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Alert, Button } from 'react-bootstrap';\n\n// actions\nimport {\n    changeLayout,\n    changeLayoutColor,\n    changeLayoutWidth,\n    changeMenuPositions,\n    changeSidebarTheme,\n    changeSidebarType,\n    toggleSidebarUserInfo,\n    changeTopbarTheme,\n} from '../../redux/actions';\n\n// constants\nimport * as layoutConstants from '../../constants/layout';\n\n// custom hook\nimport { useViewport, useRedux } from '../../hooks/';\n\n// components\nimport LayoutTypes from './LayoutTypes';\nimport LayoutColor from './LayoutColor';\nimport LayoutWidth from './LayoutWidth';\nimport MenuPositions from './MenuPositions';\nimport LeftSideBarTheme from './LeftSideBarTheme';\nimport LeftSideBarType from './LeftSideBarType';\nimport SidebarUserInfo from './SidebarUserInfo';\nimport TopbarTheme from './TopbarTheme';\n\nconst ThemeCustomizer = () => {\n    const { dispatch, appSelector } = useRedux();\n    const { width } = useViewport();\n\n    const {\n        layoutColor,\n        layoutType,\n        layoutWidth,\n        menuPosition,\n        leftSideBarType,\n        leftSideBarTheme,\n        showSidebarUserInfo,\n        topbarTheme,\n    } = appSelector((state) => ({\n        layoutColor: state.Layout.layoutColor,\n        layoutType: state.Layout.layoutType,\n        layoutWidth: state.Layout.layoutWidth,\n        menuPosition: state.Layout.menuPosition,\n        leftSideBarTheme: state.Layout.leftSideBarTheme,\n        leftSideBarType: state.Layout.leftSideBarType,\n        showSidebarUserInfo: state.Layout.showSidebarUserInfo,\n        topbarTheme: state.Layout.topbarTheme,\n    }));\n\n    const [disableTopbarTheme, setDisableTopbarTheme] = useState<boolean>(false);\n    const [disableSidebarTheme, setDisableSidebarTheme] = useState<boolean>(false);\n    const [disableSidebarType, setDisableSidebarType] = useState<boolean>(false);\n    const [disableSidebarUser, setDisableSidebarUser] = useState<boolean>(false);\n\n    /**\n     * change state based on props changes\n     */\n    const _loadStateFromProps = useCallback(() => {\n        setDisableTopbarTheme(layoutColor !== layoutConstants.LayoutColor.LAYOUT_COLOR_DARK);\n        setDisableSidebarTheme(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n        setDisableSidebarType(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL && width > 991);\n        setDisableSidebarUser(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n    }, [layoutColor, layoutType, width]);\n\n    useEffect(() => {\n        _loadStateFromProps();\n    }, [_loadStateFromProps]);\n\n    /**\n     * On layout change\n     */\n    const changeLayoutType = (value: string) => {\n        var layout = value;\n        switch (layout) {\n            case 'horizontal':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n                break;\n            default:\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n                break;\n        }\n    };\n\n    /**\n     * Change the layout color\n     */\n    const changeLayoutColorScheme = (value: string) => {\n        var mode = value;\n\n        switch (mode) {\n            case 'dark':\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\n                break;\n            default:\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\n                break;\n        }\n    };\n\n    /**\n     * Change the width mode\n     */\n    const changeWidthMode = (value: string) => {\n        var mode = value;\n\n        switch (mode) {\n            case 'boxed':\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\n                break;\n            default:\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\n                break;\n        }\n    };\n\n    /*\n     * Change menus position\n     */\n    const changeMenuPosition = (value: string) => {\n        var position = value;\n\n        switch (position) {\n            case 'scrollable':\n                dispatch(changeMenuPositions(layoutConstants.MenuPositions.MENU_POSITION_SCROLLABLE));\n                break;\n            default:\n                dispatch(changeMenuPositions(layoutConstants.MenuPositions.MENU_POSITION_FIXED));\n                break;\n        }\n    };\n\n    /**\n     * Changes the theme\n     */\n    const changeLeftSidebarTheme = (value: string) => {\n        var theme = value;\n        switch (theme) {\n            case 'dark':\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\n                break;\n            case 'brand':\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_BRAND));\n                break;\n            case 'gradient':\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_GRADIENT));\n                break;\n            default:\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\n                break;\n        }\n    };\n\n    /**\n     * Change the leftsiderbar type\n     */\n    const changeLeftSiderbarType = (value: string) => {\n        var type = value;\n        switch (type) {\n            case 'condensed':\n                dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\n                break;\n            case 'compact':\n                dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_COMPACT));\n                break;\n            default:\n                dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n                break;\n        }\n    };\n\n    /*\n     * Toggle the leftsidebar use info\n     */\n    const toggleLeftSidebarUserInfo = (value: boolean) => {\n        var checked = value;\n        dispatch(toggleSidebarUserInfo(checked));\n    };\n\n    /*\n     * Change topbar theme\n     */\n    const changeTopBarTheme = (value: string) => {\n        var theme = value;\n        switch (theme) {\n            case 'light':\n                dispatch(changeTopbarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_LIGHT));\n                break;\n            default:\n                dispatch(changeTopbarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_DARK));\n                break;\n        }\n    };\n\n    /**\n     * Reset everything\n     */\n    const reset = () => {\n        changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_VERTICAL);\n        changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\n        changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\n        changeMenuPosition(layoutConstants.MenuPositions.MENU_POSITION_FIXED);\n        changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT);\n        toggleLeftSidebarUserInfo(true);\n        changeTopBarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_LIGHT);\n        changeLeftSiderbarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT);\n    };\n\n    return (\n        <div className=\"p-3\">\n            <Alert variant=\"warning\">\n                <strong>Customize </strong> the overall color scheme, Layout, etc.\n            </Alert>\n\n            {/* Layouts */}\n            <LayoutTypes\n                changeLayoutType={changeLayoutType}\n                layoutType={layoutType}\n                layoutConstants={layoutConstants.LayoutTypes}\n            />\n            <LayoutColor\n                changeLayoutColorScheme={changeLayoutColorScheme}\n                layoutColor={layoutColor}\n                layoutConstants={layoutConstants.LayoutColor}\n            />\n\n            {/* Width */}\n            <LayoutWidth\n                changeWidthMode={changeWidthMode}\n                layoutWidth={layoutWidth}\n                layoutConstants={layoutConstants.LayoutWidth}\n            />\n\n            {/* Menu Posiotions */}\n            <MenuPositions\n                menuPosition={menuPosition}\n                changeMenuPosition={changeMenuPosition}\n                layoutConstants={layoutConstants.MenuPositions}\n            />\n\n            {/* Left Sidebar */}\n            {disableSidebarTheme && (\n                <LeftSideBarTheme\n                    changeLeftSidebarTheme={changeLeftSidebarTheme}\n                    leftSideBarTheme={leftSideBarTheme}\n                    layoutConstants={layoutConstants.SideBarTheme}\n                />\n            )}\n\n            {/* Left Sidebar Size */}\n            {disableSidebarType && (\n                <LeftSideBarType\n                    changeLeftSiderbarType={changeLeftSiderbarType}\n                    leftSideBarType={leftSideBarType}\n                    layoutConstants={layoutConstants.SideBarTypes}\n                />\n            )}\n\n            {/* User Info */}\n            {disableSidebarUser && (\n                <SidebarUserInfo\n                    toggleLeftSidebarUserInfo={toggleLeftSidebarUserInfo}\n                    showSidebarUserInfo={showSidebarUserInfo}\n                />\n            )}\n\n            {/* Topbar */}\n            {disableTopbarTheme && (\n                <TopbarTheme\n                    changeTopBarTheme={changeTopBarTheme}\n                    topbarTheme={topbarTheme}\n                    layoutConstants={layoutConstants.TopbarTheme}\n                />\n            )}\n\n            <div className=\"d-grid mt-4\">\n                <Button id=\"resetBtn\" onClick={() => reset()}>\n                    Reset to Default\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default ThemeCustomizer;\n"]},"metadata":{},"sourceType":"module"}