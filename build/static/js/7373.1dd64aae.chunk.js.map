{"version":3,"file":"static/js/7373.1dd64aae.chunk.js","mappings":"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","sources":["components/FileUploader.tsx","pages/forms/FileUpload.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Dropzone from 'react-dropzone';\n\ntype FileType = File & {\n    preview?: string;\n    formattedSize?: string;\n};\n\ntype FileUploaderProps = {\n    onFileUpload?: (files: FileType[]) => void;\n    showPreview?: boolean;\n};\n\nconst FileUploader = (props: FileUploaderProps) => {\n    const [selectedFiles, setSelectedFiles] = useState<FileType[]>([]);\n\n    /**\n     * Handled the accepted files and shows the preview\n     */\n    const handleAcceptedFiles = (files: FileType[]) => {\n        var allFiles = files;\n\n        if (props.showPreview) {\n            (files || []).map((file) =>\n                Object.assign(file, {\n                    preview: file['type'].split('/')[0] === 'image' ? URL.createObjectURL(file) : null,\n                    formattedSize: formatBytes(file.size),\n                })\n            );\n            allFiles = [...selectedFiles];\n            allFiles.push(...files);\n            setSelectedFiles(allFiles);\n        }\n\n        if (props.onFileUpload) props.onFileUpload(allFiles);\n    };\n\n    /**\n     * Formats the size\n     */\n    const formatBytes = (bytes: number, decimals: number = 2) => {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    };\n\n    /*\n     * Removes the selected file\n     */\n    const removeFile = (fileIndex: number) => {\n        const newFiles = [...selectedFiles];\n        newFiles.splice(fileIndex, 1);\n        setSelectedFiles(newFiles);\n        if (props.onFileUpload) props.onFileUpload(newFiles);\n    };\n\n    return (\n        <>\n            <Dropzone {...props} onDrop={(acceptedFiles) => handleAcceptedFiles(acceptedFiles)}>\n                {({ getRootProps, getInputProps }) => (\n                    <div className=\"dropzone\">\n                        <div className=\"dz-message needsclick\" {...getRootProps()}>\n                            <input {...getInputProps()} />\n                            <i className=\"h3 text-muted dripicons-cloud-upload\"></i>\n                            <h4>Drop files here or click to upload.</h4>\n                            <span className=\"text-muted font-13\">\n                                (This is just a demo dropzone. Selected files are <strong>not</strong> actually\n                                uploaded.)\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </Dropzone>\n\n            {props.showPreview && (\n                <div className=\"dropzone-previews mt-3\" id=\"uploadPreviewTemplate\">\n                    {(selectedFiles || []).map((f, i) => {\n                        return (\n                            <Card className=\"mt-1 mb-0 shadow-none border\" key={i + '-file'}>\n                                <div className=\"p-2\">\n                                    <Row className=\"align-items-center\">\n                                        {f.preview && (\n                                            <Col className=\"col-auto\">\n                                                <img\n                                                    data-dz-thumbnail=\"\"\n                                                    className=\"avatar-sm rounded bg-light\"\n                                                    alt={f.name}\n                                                    src={f.preview}\n                                                />\n                                            </Col>\n                                        )}\n                                        {!f.preview && (\n                                            <Col className=\"col-auto\">\n                                                <div className=\"avatar-sm\">\n                                                    <span className=\"avatar-title bg-primary rounded\">\n                                                        {f.type.split('/')[0]}\n                                                    </span>\n                                                </div>\n                                            </Col>\n                                        )}\n                                        <Col className=\"ps-0\">\n                                            <Link to=\"#\" className=\"text-muted fw-bold\">\n                                                {f.name}\n                                            </Link>\n                                            <p className=\"mb-0\">\n                                                <strong>{f.formattedSize}</strong>\n                                            </p>\n                                        </Col>\n                                        <Col className=\"text-end\">\n                                            <Link to=\"#\" className=\"btn btn-link btn-lg text-muted shadow-none\">\n                                                <i className=\"dripicons-cross\" onClick={() => removeFile(i)}></i>\n                                            </Link>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Card>\n                        );\n                    })}\n                </div>\n            )}\n        </>\n    );\n};\n\nFileUploader.defaultProps = {\n    showPreview: true,\n};\n\nexport default FileUploader;\n","import React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../hooks';\n\n// components\nimport FileUploader from '../../components/FileUploader';\n\nconst FileUpload = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'File Uploads',\n        breadCrumbItems: [\n            {\n                path: '/forms/upload',\n                label: 'Forms',\n            },\n            {\n                path: '/forms/upload',\n                label: 'File Uploads',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <Row>\n            <Col>\n                <Card>\n                    <Card.Body>\n                        <h4 className=\"header-title mb-3\">Dropzone File Upload</h4>\n\n                        <p className=\"text-muted font-13 m-b-30\">\n                            DropzoneJS is an open source library that provides drag’n’drop file uploads with image\n                            previews.\n                        </p>\n\n                        <FileUploader\n                            onFileUpload={(files) => {\n                                console.log('Uploaded files - ', files);\n                            }}\n                        />\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n    );\n};\n\nexport default FileUpload;\n"],"names":["FileUploader","props","useState","selectedFiles","setSelectedFiles","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","onDrop","acceptedFiles","files","allFiles","showPreview","map","file","Object","assign","preview","split","URL","createObjectURL","formattedSize","size","push","onFileUpload","handleAcceptedFiles","getRootProps","getInputProps","className","id","f","Card","Row","Col","alt","name","src","type","to","onClick","fileIndex","newFiles","splice","removeFile","defaultProps","usePageTitle","title","breadCrumbItems","path","label","active","console"],"sourceRoot":""}