{"version":3,"file":"static/js/1596.14375258.chunk.js","mappings":"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","sources":["components/form/VerticalForm.tsx","components/form/FormInput.tsx","../node_modules/react-bootstrap/esm/types.js","../node_modules/react-bootstrap/esm/DropdownButton.js","pages/forms/Basic.tsx","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js"],"sourcesContent":["import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n})]);","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","import { useForm } from 'react-hook-form';\nimport { Row, Col, Card, Form, FloatingLabel, InputGroup, Button, Dropdown, DropdownButton } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n// hooks\nimport { usePageTitle } from '../../hooks';\n\n// components\nimport { FormInput } from '../../components/form';\n\ntype Colors = {\n    variant: string;\n    name: string;\n};\n\nconst BasicInputElements = () => {\n    /*\n     * form methods\n     */\n    const methods = useForm({\n        defaultValues: {\n            password: '12345',\n            statictext: 'email@example.com',\n            color: '#35b8e0',\n        },\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Types</h4>\n                <p className=\"sub-header\">\n                    Most common form control, text-based input fields. Includes support for all HTML5 types:{' '}\n                    <code>text</code>, <code>password</code>, <code>datetime</code>, <code>datetime-local</code>,{' '}\n                    <code>date</code>, <code>month</code>, <code>time</code>, <code>week</code>, <code>number</code>,{' '}\n                    <code>email</code>, <code>url</code>, <code>search</code>, <code>tel</code>, and <code>color</code>.\n                </p>\n\n                <Row>\n                    <Col lg={6}>\n                        <form onSubmit={handleSubmit(() => {})}>\n                            <FormInput\n                                label=\"Text\"\n                                type=\"text\"\n                                name=\"text\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"text\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Email\"\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\"Email\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"email\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Show/Hide Password\"\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder=\"password placeholder\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"password\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Placeholder\"\n                                type=\"text\"\n                                name=\"placeholder\"\n                                placeholder=\"placeholder\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"placeholder\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Text Area\"\n                                type=\"textarea\"\n                                name=\"textarea\"\n                                rows={5}\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"textarea\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Read only\"\n                                type=\"text\"\n                                name=\"text1\"\n                                id=\"text1\"\n                                placeholder=\"Readonly value\"\n                                readOnly\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"text1\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Disabled\"\n                                type=\"text\"\n                                name=\"text2\"\n                                id=\"text2\"\n                                placeholder=\"Disabled value\"\n                                disabled\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"text2\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Static control\"\n                                type=\"text\"\n                                name=\"statictext\"\n                                placeholder=\"Disabled\"\n                                readOnly\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"statictext\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label htmlFor=\"text3\" className=\"form-label\">\n                                    Helping text\n                                </Form.Label>\n                                <Form.Control type=\"text\" name=\"text\" id=\"text3\" placeholder=\"Helping text\" />\n                                <Form.Text>\n                                    A block of help text that breaks onto a new line and may extend beyond one line.\n                                </Form.Text>\n                            </Form.Group>\n                        </form>\n                    </Col>\n\n                    <Col lg={6}>\n                        <form onSubmit={handleSubmit(() => {})}>\n                            <FormInput\n                                name=\"select\"\n                                label=\"Input Select\"\n                                type=\"select\"\n                                containerClass=\"mb-3\"\n                                className=\"form-select\"\n                                register={register}\n                                key=\"select\"\n                                errors={errors}\n                                control={control}\n                            >\n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                            </FormInput>\n\n                            <FormInput\n                                name=\"selectMulti\"\n                                label=\"Multiple Select\"\n                                type=\"select\"\n                                multiple\n                                containerClass=\"mb-3\"\n                                className=\"form-select\"\n                                register={register}\n                                key=\"selectMulti\"\n                                errors={errors}\n                                control={control}\n                            >\n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                            </FormInput>\n\n                            <FormInput\n                                label=\"Default file input\"\n                                type=\"file\"\n                                name=\"file\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"file\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Date\"\n                                type=\"date\"\n                                name=\"date\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"date\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Month\"\n                                type=\"month\"\n                                name=\"month\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"month\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Time\"\n                                type=\"time\"\n                                name=\"time\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"time\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Week\"\n                                type=\"week\"\n                                name=\"week\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"week\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Number\"\n                                type=\"number\"\n                                name=\"number\"\n                                placeholder=\"number placeholder\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"number\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Color\"\n                                type=\"color\"\n                                name=\"color\"\n                                className=\"w-100\"\n                                placeholder=\"color placeholder\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"color\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <Form.Group className=\"mb-0\">\n                                <Form.Label htmlFor=\"exampleRange\" className=\"form-label\">\n                                    Range\n                                </Form.Label>\n                                <Form.Range />\n                            </Form.Group>\n                        </form>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FloatingLabels = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Floating labels</h4>\n                <p className=\"sub-header\">\n                    Wrap a <code>&lt;Form.Control&gt;</code> element in <code>&lt;FloatingLabel&gt;</code>\n                    to enable floating labels with Bootstrap’s textual form fields. A <code>placeholder</code>\n                    is required on each <code>&lt;Form.Control&gt;</code> as our method of CSS-only floating labels uses\n                    the <code>:placeholder-shown</code> pseudo-element.\n                </p>\n\n                <Row>\n                    <Col lg={6}>\n                        <h5 className=\"mb-3\">Floating Example</h5>\n                        <FloatingLabel controlId=\"floatingInput\" label=\"Email address\" className=\"mb-3\">\n                            <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n                        </FloatingLabel>\n                        <FloatingLabel controlId=\"floatingPassword\" label=\"Password\" className=\"mb-3\">\n                            <Form.Control type=\"password\" placeholder=\"Password\" />\n                        </FloatingLabel>\n                        <FloatingLabel controlId=\"floatingTextarea2\" label=\"Comments\">\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder=\"Leave a comment here\"\n                                style={{ height: '100px' }}\n                            />\n                        </FloatingLabel>\n                    </Col>\n\n                    <Col lg={6}>\n                        <h5 className=\"mb-3\">Selects</h5>\n                        <FloatingLabel controlId=\"floatingSelect\" label=\"Works with selects\" className=\"mb-3\">\n                            <Form.Select aria-label=\"Floating label select example\">\n                                <option>Open this select menu</option>\n                                <option value=\"1\">One</option>\n                                <option value=\"2\">Two</option>\n                                <option value=\"3\">Three</option>\n                            </Form.Select>\n                        </FloatingLabel>\n\n                        <Row className=\"g-2\">\n                            <Col md>\n                                <FloatingLabel controlId=\"floatingInputGrid\" label=\"Email address\">\n                                    <Form.Control\n                                        type=\"email\"\n                                        placeholder=\"name@example.com\"\n                                        defaultValue=\"name@example.com\"\n                                    />\n                                </FloatingLabel>\n                            </Col>\n                            <Col md>\n                                <FloatingLabel controlId=\"floatingSelectGrid\" label=\"Works with selects\">\n                                    <Form.Select aria-label=\"Floating label select example\">\n                                        <option>Open this select menu</option>\n                                        <option value=\"1\">One</option>\n                                        <option value=\"2\">Two</option>\n                                        <option value=\"3\">Three</option>\n                                    </Form.Select>\n                                </FloatingLabel>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst SelectInput = () => {\n    return (\n        <>\n            <h4 className=\"header-title\">Select menu</h4>\n            <p className=\"sub-header\">\n                Custom <code>&lt;select&gt;</code> menus need only a custom class, <code>.custom-select</code> to\n                trigger the custom styles.\n            </p>\n\n            <Form.Group>\n                <Form.Select className=\"mt-3\" aria-label=\"Default select example\">\n                    <option defaultValue=\"0\">Open this select menu</option>\n                    <option value=\"1\">One</option>\n                    <option value=\"2\">Two</option>\n                    <option value=\"3\">Three</option>\n                </Form.Select>\n            </Form.Group>\n        </>\n    );\n};\n\nconst Switches = () => {\n    return (\n        <>\n            <h4 className=\"header-title mt-4\">Switches</h4>\n            <p className=\"text-muted\">\n                A switch has the markup of a custom checkbox but uses the <code>.custom-switch</code> class to render a\n                toggle switch. Switches also support the <code>disabled</code> attribute.\n            </p>\n\n            <Form>\n                <Form.Check type=\"switch\" id=\"custom-switch\" label=\"Toggle this switch element\" />\n                <Form.Check\n                    disabled\n                    type=\"switch\"\n                    label=\"Disabled switch element\"\n                    id=\"disabled-custom-switch\"\n                    className=\"mt-1\"\n                />\n            </Form>\n        </>\n    );\n};\n\nconst CustomCheckboxes = () => {\n    return (\n        <>\n            <Form.Check type=\"checkbox\" id=\"default-checkbox1\" label=\"Check this custom checkbox\" />\n            <Form.Check type=\"checkbox\" id=\"default-checkbox2\" label=\"Check this custom checkbox\" />\n        </>\n    );\n};\n\nconst CustomRadios = () => {\n    return (\n        <>\n            <Form.Check type=\"radio\" id=\"default-radio1\" name=\"customRadio\" label=\"Toggle this custom radio\" />\n            <Form.Check type=\"radio\" id=\"default-radio2\" name=\"customRadio\" label=\"Or toggle this other custom radio\" />\n        </>\n    );\n};\n\nconst InputSizes = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Sizes</h4>\n                <p className=\"sub-header\">\n                    Use size on <code>&lt;FormControl&gt;</code> and <code>&lt;FormLabel&gt;</code> to change the size\n                    of inputs and labels respectively.\n                </p>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"small\">Small</Form.Label>\n                        <Form.Control type=\"text\" name=\"small\" id=\"small\" placeholder=\"Small\" size=\"sm\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Normal\">Normal</Form.Label>\n                        <Form.Control type=\"text\" name=\"Normal\" id=\"Normal\" placeholder=\"Normal\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Large\">Large</Form.Label>\n                        <Form.Control type=\"text\" name=\"Large\" id=\"Large\" placeholder=\"Large\" size=\"lg\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-0\">\n                        <Form.Label htmlFor=\"grid\">Grid Sizes</Form.Label>\n                        <Row>\n                            <Col sm={4}>\n                                <Form.Control type=\"text\" name=\"grid\" id=\"grid\" placeholder=\".col-sm-4\" />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InputGroups = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Group</h4>\n                <p className=\"sub-header\">\n                    Easily extend form conrols by adding text, buttons, or button groups on either side of textual\n                    inputs, custom selects, and custom file inputs\n                </p>\n\n                <Form>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Static\">Static</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                            <Form.Control\n                                placeholder=\"Username\"\n                                aria-label=\"Username\"\n                                aria-describedby=\"basic-addon1\"\n                            />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Dropdown\">Dropdown</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <DropdownButton variant=\"primary\" title=\"Dropdown\" id=\"input-group-dropdown-1\">\n                                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                                <Dropdown.Divider />\n                                <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                            </DropdownButton>\n                            <Form.Control aria-label=\"Text input with dropdown button\" />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Button\">Button</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <Form.Control\n                                placeholder=\"Recipient's username\"\n                                aria-label=\"Recipient's username\"\n                                aria-describedby=\"basic-addon2\"\n                            />\n                            <Button variant=\"dark\" id=\"button-addon2\">\n                                Button\n                            </Button>\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Row className=\"g-2\">\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"file\">Default file input</Form.Label>\n                                <Form.Control type=\"file\" />\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"formFileMultiple01\">Multiple files input</Form.Label>\n                                <Form.Control type=\"file\" multiple />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DefaultForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Basic Example</h4>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail2\">Email</Form.Label>\n                        <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail2\" placeholder=\"Enter your email\" />\n                        <Form.Text>We'll never share your email with anyone else.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword2\">Password</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            name=\"password\"\n                            id=\"examplePassword2\"\n                            placeholder=\"password placeholder\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" id=\"formGridCheckbox\">\n                        <Form.Check type=\"checkbox\" id=\"formGridCheckbox\" label=\"Check me out\" />\n                    </Form.Group>\n\n                    <Button type=\"submit\">Submit</Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Horizontal Form</h4>\n                <Form>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail3\" column sm={3}>\n                            Email\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail3\" placeholder=\"Email\" />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword3\" column sm={3}>\n                            Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword3\"\n                                placeholder=\"Password\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword4\" column sm={3}>\n                            Re-Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword4\"\n                                placeholder=\"Retype Password\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Form.Check label=\"Check me out !\" id=\"checkmeout\" />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-0\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Button variant=\"info\" type=\"submit\">\n                                Sign in\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InlineForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Column sizing</h4>\n\n                <p className=\"sub-header\">\n                    As shown in the previous examples, our grid system allows you to place any number of{' '}\n                    <code>.col</code>s within a <code>.row</code>.\n                </p>\n                <Form className=\"row row-cols-lg-auto g-3 align-items-center\">\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                readOnly\n                                type=\"email\"\n                                name=\"email\"\n                                id=\"exampleEmail4\"\n                                bsPrefix=\"form-control-plaintext\"\n                                placeholder=\"email@example.com\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword5\"\n                                placeholder=\"Password\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Button color=\"primary\" type=\"submit\">\n                            Confirm identity\n                        </Button>\n                    </div>\n                </Form>\n\n                <h6 className=\"font-13 mt-3\">Auto-sizing</h6>\n\n                <Form>\n                    <Row className=\"align-items-center\">\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInput\" visuallyHidden>\n                                Name\n                            </Form.Label>\n                            <Form.Control className=\"mb-2\" id=\"inlineFormInput\" placeholder=\"Jane Doe\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInputGroup\" visuallyHidden>\n                                Username\n                            </Form.Label>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Text>@</InputGroup.Text>\n                                <Form.Control id=\"inlineFormInputGroup\" placeholder=\"Username\" />\n                            </InputGroup>\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Check type=\"checkbox\" id=\"autoSizingCheck\" className=\"mb-2\" label=\"Remember me\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Button type=\"submit\" className=\"mb-2\">\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormGrid = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Gutters</h4>\n                <p className=\"text-muted font-13\">More complex layouts can also be created with the grid system.</p>\n\n                <Form>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"formGridEmail\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"Email\" />\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\" />\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"formGridAddress1\">\n                        <Form.Label>Address</Form.Label>\n                        <Form.Control placeholder=\"1234 Main St\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" controlId=\"formGridAddress2\">\n                        <Form.Label>Address 2</Form.Label>\n                        <Form.Control placeholder=\"Apartment, studio, or floor\" />\n                    </Form.Group>\n\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md={6} controlId=\"formGridCity\">\n                            <Form.Label>City</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n\n                        <Form.Group as={Col} md={4} controlId=\"formGridState\">\n                            <Form.Label>State</Form.Label>\n                            <Form.Select defaultValue=\"Choose...\">\n                                <option>Choose...</option>\n                                <option>Option 1</option>\n                                <option>Option 2</option>\n                                <option>Option 3</option>\n                            </Form.Select>\n                        </Form.Group>\n\n                        <Form.Group as={Col} md={2} controlId=\"formGridZip\">\n                            <Form.Label>Zip</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" id=\"formGridCheckbox2\">\n                        <Form.Check type=\"checkbox\" label=\"Check this custom checkbox\" id=\"formGridCheckbox2\" />\n                    </Form.Group>\n\n                    <Button type=\"submit\" className=\"waves-effect waves-light\">\n                        Sign in\n                    </Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst CheckboxBasic = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'primary',\n            name: 'Primary',\n        },\n        {\n            variant: 'success',\n            name: 'Success',\n        },\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'warning',\n            name: 'Warning',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n        {\n            variant: 'info',\n            name: 'Info',\n        },\n        {\n            variant: 'dark',\n            name: 'Dark',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom checkbox - Basic</h4>\n\n            <p className=\"sub-header\">\n                Supports bootstrap brand colors: <code>.form-check</code>,<code>.form-check-*</code> etc.\n            </p>\n\n            {(colors || []).map((item, index) => {\n                return (\n                    <Form.Check\n                        key={index.toString()}\n                        label={item.name}\n                        type=\"checkbox\"\n                        id={`basic-checkbox-${index}`}\n                        className={classNames('mb-2', 'form-check-' + item.variant)}\n                        aria-label=\"option 1\"\n                        defaultChecked={index % 2 === 0}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nconst CheckboxCircled = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'primary',\n            name: 'Primary',\n        },\n        {\n            variant: 'success',\n            name: 'Success',\n        },\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'warning',\n            name: 'Warning',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n        {\n            variant: 'info',\n            name: 'Info',\n        },\n        {\n            variant: 'dark',\n            name: 'Dark',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom checkbox - Circled</h4>\n\n            <p className=\"sub-header\">\n                <code>.rounded-circle</code> for roundness.\n            </p>\n\n            {(colors || []).map((item, index) => {\n                return (\n                    <Form.Check\n                        key={index.toString()}\n                        id={`circle-checkbox-${index}`}\n                        className={classNames('mb-2', 'form-check', 'form-check-' + item.variant)}\n                    >\n                        <Form.Check.Input type=\"checkbox\" className=\"rounded-circle\" defaultChecked={index % 3 === 0} />\n                        <Form.Check.Label>{item.name} </Form.Check.Label>\n                    </Form.Check>\n                );\n            })}\n        </>\n    );\n};\n\nconst CheckboxDisabled = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'primary',\n            name: 'Primary',\n        },\n        {\n            variant: 'success',\n            name: 'Success',\n        },\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'warning',\n            name: 'Warning',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom radio - Circled</h4>\n\n            <p className=\"sub-header\">\n                <code>.rounded-circle</code> for roundness.\n            </p>\n\n            {(colors || []).map((item, index) => {\n                return (\n                    <Form.Check\n                        key={index.toString()}\n                        label={item.name}\n                        id={`circled-radio-${index}`}\n                        type=\"radio\"\n                        className={classNames('mb-2', 'form-check-' + item.variant)}\n                        aria-label=\"option 1\"\n                        disabled\n                        defaultChecked={index % 3 === 0}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nconst RadioBasic = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'primary',\n            name: 'Primary',\n        },\n        {\n            variant: 'success',\n            name: 'Success',\n        },\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'warning',\n            name: 'Warning',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n        {\n            variant: 'info',\n            name: 'Info',\n        },\n        {\n            variant: 'dark',\n            name: 'Dark',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom radio - Basic</h4>\n\n            <p className=\"sub-header\">\n                Supports bootstrap brand colors: <code>.form-check</code>,<code>.form-check-*</code> etc.\n            </p>\n            <Row>\n                <Col sm={6}>\n                    {(colors || []).map((item, index) => {\n                        return (\n                            <Form.Check\n                                key={index.toString()}\n                                type=\"radio\"\n                                id={`basic-radio-${index}`}\n                                label={item.name}\n                                className={classNames('mb-2', 'form-check-' + item.variant)}\n                                aria-label=\"option 1\"\n                                name=\"customradio1\"\n                                defaultChecked={index === 2}\n                            />\n                        );\n                    })}\n                </Col>\n                <Col sm={6}>\n                    {(colors || []).map((item, index) => {\n                        return (\n                            <Form.Check\n                                key={index.toString()}\n                                type=\"radio\"\n                                id={`basic-radio2-${index}`}\n                                label={item.name}\n                                className={classNames('mb-2', 'form-check-' + item.variant)}\n                                aria-label=\"option 1\"\n                                defaultChecked={index % 3 === 0}\n                            />\n                        );\n                    })}\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nconst RadioDisabled = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'dark',\n            name: 'Dark',\n        },\n        {\n            variant: 'blue',\n            name: 'Blue',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom checkbox - Circled</h4>\n\n            <p className=\"sub-header\">\n                <code>.rounded-circle</code> for roundness.\n            </p>\n\n            {(colors || []).map((item, index) => {\n                return (\n                    <Form.Check\n                        id={'custom-checkbox-' + item.variant}\n                        type=\"radio\"\n                        key={index.toString()}\n                        label={item.name}\n                        className={classNames('mb-2', 'form-check-' + item.variant)}\n                        aria-label=\"option 1\"\n                        disabled\n                        defaultChecked\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nconst BasicForms = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Form Components',\n        breadCrumbItems: [\n            {\n                path: '/forms/basic',\n                label: 'Forms',\n            },\n            {\n                path: '/forms/basic',\n                label: 'Form Components',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <>\n            <Row>\n                <Col>\n                    <BasicInputElements />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col md={6}>\n                                    <SelectInput />\n                                    <Switches />\n                                </Col>\n\n                                <Col md={6}>\n                                    <h4 className=\"header-title mt-5 mt-sm-0\">Checkboxes and radios</h4>\n                                    <div className=\"mt-3\">\n                                        <CustomCheckboxes />\n                                    </div>\n                                    <div className=\"mt-3\">\n                                        <CustomRadios />\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FloatingLabels />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <InputSizes />\n                </Col>\n\n                <Col lg={6}>\n                    <InputGroups />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <DefaultForm />\n                </Col>\n\n                <Col lg={6}>\n                    <HorizontalForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <InlineForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FormGrid />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col md={4}>\n                                    <CheckboxBasic />\n                                </Col>\n\n                                <Col md={4}>\n                                    <CheckboxCircled />\n                                </Col>\n\n                                <Col md={4}>\n                                    <CheckboxDisabled />\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col md={4}>\n                                    <RadioBasic />\n                                </Col>\n\n                                <Col md={4}>\n                                    <RadioDisabled />\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\nexport default BasicForms;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;"],"names":["defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","otherProps","useState","showPassword","setShowPassword","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","labelClassName","containerClass","action","hasEndIcon","undefined","alignDirection","PropTypes","alignPropType","sm","md","lg","xl","xxl","propTypes","href","title","disabled","align","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","bsPrefix","variant","size","DropdownButton","_jsxs","Dropdown","_jsx","DropdownToggle","childBsPrefix","DropdownMenu","role","renderOnMount","displayName","BasicInputElements","password","statictext","color","Card","Row","Col","readOnly","htmlFor","multiple","FloatingLabels","FloatingLabel","controlId","style","height","value","defaultValue","Switches","CustomCheckboxes","CustomRadios","InputSizes","InputGroups","Button","DefaultForm","HorizontalForm","column","span","offset","InlineForm","xs","visuallyHidden","FormGrid","CheckboxBasic","item","index","defaultChecked","toString","CheckboxCircled","CheckboxDisabled","RadioBasic","colors","RadioDisabled","usePageTitle","breadCrumbItems","path","active","CardImg","Component","prefix","useBootstrapPrefix","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context"],"sourceRoot":""}