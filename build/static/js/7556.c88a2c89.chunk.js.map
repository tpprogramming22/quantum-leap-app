{"version":3,"file":"static/js/7556.c88a2c89.chunk.js","mappings":"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","sources":["components/Loader.tsx","components/form/VerticalForm.tsx","components/form/FormInput.tsx","pages/auth/AuthLayout.tsx","pages/auth/Login.tsx"],"sourcesContent":["const Loader = () => {\n    return (\n        <div className=\"preloader\" id=\"preloader\">\n            <div className=\"status\" id=\"status\">\n                <div className=\"spinner\">\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import { useEffect } from 'react';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\n// images\nimport LogoDark from '../../assets/images/logo-dark.png';\nimport LogoLight from '../../assets/images/logo-light.png';\n\ntype AccountLayoutProps = {\n    hasLogo?: boolean;\n    bottomLinks?: any;\n    children?: React.ReactNode;\n};\n\nconst AuthLayout = ({ hasLogo, bottomLinks, children }: AccountLayoutProps) => {\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (document.body) {\n            document.body.classList.add('authentication-bg');\n        }\n        return () => {\n            if (document.body) {\n                document.body.classList.remove('authentication-bg');\n            }\n        };\n    }, []);\n\n    return (\n        <div className=\"account-pages my-5\">\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Col md={8} lg={6} xl={4}>\n                        {hasLogo && (\n                            <div className=\"text-center\">\n                                <div className=\"auth-logo\">\n                                    <Link to=\"/\" className=\"logo logo-dark text-center\">\n                                        <span className=\"logo-lg\">\n                                            <img src={LogoDark} alt=\"\" height=\"22\" />\n                                        </span>\n                                    </Link>\n\n                                    <Link to=\"/\" className=\"logo logo-light text-center\">\n                                        <span className=\"logo-lg\">\n                                            <img src={LogoLight} alt=\"\" height=\"22\" />\n                                        </span>\n                                    </Link>\n                                </div>\n                                <p className=\"text-muted mt-2 mb-4\">{t('Your Glucose Dashboard')}</p>\n                            </div>\n                        )}\n                        <Card>\n                            <Card.Body className=\"p-4\">{children}</Card.Body>\n                        </Card>\n\n                        {/* bottom links */}\n                        {bottomLinks}\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nAuthLayout.defaultProps = {\n    hasLogo: true,\n};\n\nexport default AuthLayout;\n","import { useEffect } from 'react';\nimport { Button, Alert, Row, Col } from 'react-bootstrap';\nimport { Navigate, Link, useLocation } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useTranslation } from 'react-i18next';\n\n// hooks\nimport { useRedux } from '../../hooks/';\n\n// actions\nimport { resetAuth, loginUser } from '../../redux/actions';\n\n// components\nimport { VerticalForm, FormInput } from '../../components/form/';\nimport Loader from '../../components/Loader';\n\nimport AuthLayout from './AuthLayout';\n\ntype LocationState = {\n    from?: Location;\n};\n\ntype UserData = {\n    email: string;\n    password: string;\n};\n\n/* bottom links */\nconst BottomLink = () => {\n    const { t } = useTranslation();\n\n    return (\n        <Row className=\"mt-3\">\n            <Col xs={12} className=\"text-center\">\n                <p className=\"text-muted\">\n                    <Link to=\"/auth/forget-password\" className=\"text-muted ms-1\">\n                        <i className=\"fa fa-lock me-1\"></i>\n                        {t('Forgot your password?')}\n                    </Link>\n                </p>\n                <p className=\"text-muted\">\n                    {t(\"Don't have an account?\")}{' '}\n                    <Link to={'/auth/register'} className=\"text-dark ms-1\">\n                        <b>{t('Sign Up')}</b>\n                    </Link>\n                </p>\n            </Col>\n        </Row>\n    );\n};\n\nconst Login = () => {\n    const { t } = useTranslation();\n    const { dispatch, appSelector } = useRedux();\n\n    const { user, userLoggedIn, loading, error } = appSelector((state) => ({\n        user: state.Auth.user,\n        loading: state.Auth.loading,\n        error: state.Auth.error,\n        userLoggedIn: state.Auth.userLoggedIn,\n    }));\n\n    useEffect(() => {\n        dispatch(resetAuth());\n    }, [dispatch]);\n\n    /*\n    form validation schema\n    */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            email: yup.string().required(t('Please enter Email')).email(t('Please enter valid Email')),\n            password: yup.string().required(t('Please enter Password')),\n        })\n    );\n\n    /*\n    handle form submission\n    */\n    const onSubmit = (formData: UserData) => {\n        dispatch(loginUser(\"adminto@coderthemes.com\", formData['password']));\n    };\n\n    const location = useLocation();\n    let redirectUrl = '/';\n\n    if (location.state) {\n        const { from } = location.state as LocationState;\n        redirectUrl = from ? from.pathname : '/';\n    }\n\n    return (\n        <>\n            {userLoggedIn && user && <Navigate to={redirectUrl} replace />}\n\n            <AuthLayout bottomLinks={<BottomLink />}>\n                <div className=\"text-center mb-4\">\n                    <h4 className=\"text-uppercase mt-0\">{t('Sign In')}</h4>\n                </div>\n\n                {error && (\n                    <Alert variant=\"danger\" className=\"my-2\">\n                        {error}\n                    </Alert>\n                )}\n                {loading && <Loader />}\n\n                <VerticalForm<UserData>\n                    onSubmit={onSubmit}\n                    resolver={schemaResolver}\n                    defaultValues={{ email: 'admin@glucoease.com', password: 'test' }}\n                >\n                    <FormInput\n                        type=\"email\"\n                        name=\"email\"\n                        label={t('Email address')}\n                        placeholder={t('hello@coderthemes.com')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Password')}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter your password\"\n                        containerClass={'mb-3'}\n                    ></FormInput>\n\n                    <FormInput\n                        type=\"checkbox\"\n                        name=\"checkbox\"\n                        label={t('Remember me')}\n                        containerClass={'mb-3'}\n                        defaultChecked\n                    />\n\n                    <div className=\"text-center d-grid mb-3\">\n                        <Button variant=\"primary\" type=\"submit\" disabled={loading}>\n                            {t('Log In')}\n                        </Button>\n                    </div>\n                </VerticalForm>\n            </AuthLayout>\n        </>\n    );\n};\n\nexport default Login;\n"],"names":["className","id","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","otherProps","useState","showPassword","setShowPassword","InputGroup","Form","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","labelClassName","containerClass","action","hasEndIcon","undefined","AuthLayout","hasLogo","bottomLinks","t","useTranslation","useEffect","document","body","classList","add","remove","md","lg","xl","to","src","LogoDark","alt","height","LogoLight","defaultProps","BottomLink","xs","useRedux","dispatch","appSelector","state","user","Auth","loading","error","userLoggedIn","resetAuth","schemaResolver","yupResolver","yup","shape","email","required","password","location","useLocation","redirectUrl","from","pathname","replace","variant","formData","loginUser","defaultChecked","disabled"],"sourceRoot":""}