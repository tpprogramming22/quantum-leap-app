{"version":3,"file":"static/js/4570.ed8d6a21.chunk.js","mappings":"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","sources":["components/Scrollbar.tsx","layouts/Menu.tsx","layouts/LeftSidebar.tsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import SimpleBar from 'simplebar-react';\n\ntype ScrollbarProps = SimpleBar.Props & {\n    className?: string;\n    style?: Record<string, unknown>;\n    children?: unknown;\n};\n\nconst Scrollbar = ({ className, style, children, ...otherProps }: ScrollbarProps) => {\n    return (\n        <SimpleBar className={className} style={style} {...otherProps}>\n            {children}\n        </SimpleBar>\n    );\n};\n\nexport default Scrollbar;\n","import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Collapse } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n//helpers\nimport { findAllParent, findMenuItem } from '../helpers/menu';\n\n// constants\nimport { MenuItemTypes } from '../constants/menu';\n\ntype SubMenus = {\n    item: MenuItemTypes;\n    linkClassName?: string;\n    subMenuClassNames?: string;\n    activeMenuItems?: Array<string>;\n    toggleMenu?: (item: MenuItemTypes, status: boolean) => void;\n    className?: string;\n};\n\nconst MenuItemWithChildren = ({ item, linkClassName, subMenuClassNames, activeMenuItems, toggleMenu }: SubMenus) => {\n    const [open, setOpen] = useState<boolean>(activeMenuItems!.includes(item.key));\n\n    useEffect(() => {\n        setOpen(activeMenuItems!.includes(item.key));\n    }, [activeMenuItems, item]);\n\n    const toggleMenuItem = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.preventDefault();\n        const status = !open;\n        setOpen(status);\n        if (toggleMenu) toggleMenu(item, status);\n        return false;\n    };\n\n    return (\n        <li className={classNames('side-nav-item', { 'menuitem-active': open })}>\n            <Link\n                to=\"#\"\n                onClick={toggleMenuItem}\n                data-menu-key={item.key}\n                aria-expanded={open}\n                className={classNames('has-arrow', 'side-sub-nav-link', linkClassName, {\n                    'menuitem-active': activeMenuItems!.includes(item.key) ? 'active' : '',\n                })}\n            >\n                {item.icon && <i className={item.icon} />}\n                {!item.badge ? (\n                    <span className=\"menu-arrow\"></span>\n                ) : (\n                    <span className={classNames('badge', 'bg-' + item.badge.variant, 'rounded-pill', 'float-end')}>\n                        {item.badge.text}\n                    </span>\n                )}\n                <span> {item.label} </span>\n            </Link>\n            <Collapse in={open}>\n                <div>\n                    <ul className={classNames(subMenuClassNames)}>\n                        {(item.children || []).map((child, i) => {\n                            return (\n                                <React.Fragment key={i}>\n                                    {child.children ? (\n                                        <>\n                                            {/* parent */}\n                                            <MenuItemWithChildren\n                                                item={child}\n                                                linkClassName={activeMenuItems!.includes(child.key) ? 'active' : ''}\n                                                activeMenuItems={activeMenuItems}\n                                                subMenuClassNames=\"side-nav-third-level\"\n                                                toggleMenu={toggleMenu}\n                                            />\n                                        </>\n                                    ) : (\n                                        <>\n                                            {/* child */}\n                                            <MenuItem\n                                                item={child}\n                                                className={\n                                                    activeMenuItems!.includes(child.key) ? 'menuitem-active' : ''\n                                                }\n                                                linkClassName={activeMenuItems!.includes(child.key) ? 'active' : ''}\n                                            />\n                                        </>\n                                    )}\n                                </React.Fragment>\n                            );\n                        })}\n                    </ul>\n                </div>\n            </Collapse>\n        </li>\n    );\n};\n\nconst MenuItem = ({ item, className, linkClassName }: SubMenus) => {\n    return (\n        <li className={classNames('side-nav-item', className)}>\n            <MenuItemLink item={item} className={linkClassName} />\n        </li>\n    );\n};\n\nconst MenuItemLink = ({ item, className }: SubMenus) => {\n    return (\n        <Link\n            to={item.url!}\n            target={item.target}\n            className={classNames('side-nav-link-ref', 'side-sub-nav-link', className)}\n            data-menu-key={item.key}\n        >\n            {item.icon && <i className={item.icon} />}\n            {item.badge && (\n                <span className={classNames('badge', 'bg-' + item.badge.variant, 'rounded-pill', 'float-end')}>\n                    {item.badge.text}\n                </span>\n            )}\n            <span> {item.label} </span>\n        </Link>\n    );\n};\n\n/**\n * Renders the application menu\n */\ntype AppMenuProps = {\n    menuItems: MenuItemTypes[];\n};\n\nconst AppMenu = ({ menuItems }: AppMenuProps) => {\n    let location = useLocation();\n\n    const menuRef: any = useRef(null);\n\n    const [activeMenuItems, setActiveMenuItems] = useState<Array<string>>([]);\n\n    /*\n     * toggle the menus\n     */\n    const toggleMenu = (menuItem: MenuItemTypes, show: boolean) => {\n        if (show) setActiveMenuItems([menuItem['key'], ...findAllParent(menuItems, menuItem)]);\n    };\n\n    /**\n     * activate the menuitems\n     */\n    const activeMenu = useCallback(() => {\n        const div = document.getElementById('side-menu');\n        let matchingMenuItem = null;\n\n        if (div) {\n            let items: any = div.getElementsByClassName('side-nav-link-ref');\n            for (let i = 0; i < items.length; ++i) {\n                if (location.pathname === items[i].pathname) {\n                    matchingMenuItem = items[i];\n                    break;\n                }\n            }\n\n            if (matchingMenuItem) {\n                const mid = matchingMenuItem.getAttribute('data-menu-key');\n                const activeMt = findMenuItem(menuItems, mid);\n                if (activeMt) {\n                    setActiveMenuItems([activeMt['key'], ...findAllParent(menuItems, activeMt)]);\n                }\n            }\n        }\n    }, [location, menuItems]);\n\n    useEffect(() => {\n        activeMenu();\n    }, [activeMenu]);\n\n    return (\n        <>\n            <ul className=\"side-menu\" ref={menuRef} id=\"side-menu\">\n                {(menuItems || []).map((item, idx) => {\n                    return (\n                        <React.Fragment key={idx}>\n                            {item.isTitle ? (\n                                <li\n                                    className={classNames('menu-title', {\n                                        'mt-2': idx !== 0,\n                                    })}\n                                >\n                                    {item.label}\n                                </li>\n                            ) : (\n                                <>\n                                    {item.children ? (\n                                        <MenuItemWithChildren\n                                            item={item}\n                                            toggleMenu={toggleMenu}\n                                            subMenuClassNames=\"nav-second-level\"\n                                            activeMenuItems={activeMenuItems}\n                                            linkClassName=\"side-nav-link\"\n                                        />\n                                    ) : (\n                                        <MenuItem\n                                            item={item}\n                                            linkClassName=\"side-nav-link\"\n                                            className={activeMenuItems!.includes(item.key) ? 'menuitem-active' : ''}\n                                        />\n                                    )}\n                                </>\n                            )}\n                        </React.Fragment>\n                    );\n                })}\n            </ul>\n        </>\n    );\n};\n\nexport default AppMenu;\n","import { useEffect, useRef, useState } from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\n// helpers\nimport { getMenuItems } from '../helpers/menu';\n\n// components\nimport Scrollbar from '../components/Scrollbar';\n\nimport AppMenu from './Menu';\n\n// images\nimport profileImg from '../assets/images/users/user-1.jpg';\n\n/* user box */\nconst UserBox = () => {\n    // get the profilemenu\n    const ProfileMenus = [\n        {\n            label: 'My Account',\n            icon: 'fe-user',\n            redirectTo: '/apps/contacts/profile',\n        },\n        {\n            label: 'Settings',\n            icon: 'fe-settings',\n            redirectTo: '#',\n        },\n        {\n            label: 'Lock Screen',\n            icon: 'fe-lock',\n            redirectTo: '/auth/lock-screen',\n        },\n        {\n            label: 'Logout',\n            icon: 'fe-log-out',\n            redirectTo: '/auth/logout',\n        },\n    ];\n\n    const [dropdownOpen, setDropdownOpen] = useState<boolean>(false);\n\n    /*\n     * toggle dropdown\n     */\n    const toggleDropdown = () => {\n        setDropdownOpen(!dropdownOpen);\n    };\n\n    return (\n        <div className=\"user-box text-center\">\n            <img src={profileImg} alt=\"\" title=\"Mat Helme\" className=\"rounded-circle img-thumbnail avatar-md\" />\n            <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n                <Dropdown.Toggle\n                    id=\"dropdown-notification\"\n                    to=\"#\"\n                    as={Link}\n                    onClick={toggleDropdown}\n                    className=\"user-name h5 mt-2 mb-1 d-block\"\n                >\n                    Theodore Palmer\n                </Dropdown.Toggle>\n                <Dropdown.Menu className=\"user-pro-dropdown\">\n                    <div onClick={toggleDropdown}>\n                        {(ProfileMenus || []).map((item, index) => {\n                            return (\n                                <Link\n                                    to={item.redirectTo}\n                                    className=\"dropdown-item notify-item\"\n                                    key={index + '-profile-menu'}\n                                >\n                                    <i className={classNames(item.icon, 'me-1')}></i>\n                                    <span>{item.label}</span>\n                                </Link>\n                            );\n                        })}\n                    </div>\n                </Dropdown.Menu>\n            </Dropdown>\n            <p className=\"text-muted left-user-info\"></p>\n\n            <ul className=\"list-inline\">\n                <li className=\"list-inline-item\">\n                    <Link to=\"#\" className=\"text-muted left-user-info\">\n                        <i className=\"mdi mdi-cog\"></i>\n                    </Link>\n                </li>\n\n                <li className=\"list-inline-item\">\n                    <Link to=\"#\">\n                        <i className=\"mdi mdi-power\"></i>\n                    </Link>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\n/* sidebar content */\nconst SideBarContent = () => {\n    return (\n        <>\n            <UserBox />\n\n            <div id=\"sidebar-menu\">\n                <AppMenu menuItems={getMenuItems()} />\n            </div>\n\n            <div className=\"clearfix\" />\n        </>\n    );\n};\n\ntype LeftSidebarProps = {\n    isCondensed: boolean;\n};\n\nconst LeftSidebar = ({ isCondensed }: LeftSidebarProps) => {\n    const menuNodeRef: any = useRef(null);\n\n    /**\n     * Handle the click anywhere in doc\n     */\n    const handleOtherClick = (e: any) => {\n        if (menuNodeRef && menuNodeRef.current && menuNodeRef.current.contains(e.target)) return;\n        // else hide the menubar\n        if (document.body) {\n            document.body.classList.remove('sidebar-enable');\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleOtherClick, false);\n\n        return () => {\n            document.removeEventListener('mousedown', handleOtherClick, false);\n        };\n    }, []);\n\n    return (\n        <div className=\"left-side-menu\" ref={menuNodeRef}>\n            {!isCondensed && (\n                <Scrollbar style={{ maxHeight: '100%' }}>\n                    <SideBarContent />\n                </Scrollbar>\n            )}\n            {isCondensed && <SideBarContent />}\n        </div>\n    );\n};\n\nLeftSidebar.defaultProps = {\n    isCondensed: false,\n};\n\nexport default LeftSidebar;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["className","style","children","otherProps","MenuItemWithChildren","item","linkClassName","subMenuClassNames","activeMenuItems","toggleMenu","useState","includes","key","open","setOpen","useEffect","classNames","to","onClick","e","preventDefault","status","icon","badge","variant","text","label","Collapse","in","map","child","i","MenuItem","MenuItemLink","url","target","menuItems","location","useLocation","menuRef","useRef","setActiveMenuItems","menuItem","show","findAllParent","activeMenu","useCallback","div","document","getElementById","matchingMenuItem","items","getElementsByClassName","length","pathname","mid","getAttribute","activeMt","findMenuItem","ref","id","idx","isTitle","UserBox","dropdownOpen","setDropdownOpen","toggleDropdown","src","profileImg","alt","title","Dropdown","onToggle","as","Link","redirectTo","index","SideBarContent","getMenuItems","LeftSidebar","isCondensed","menuNodeRef","handleOtherClick","current","contains","body","classList","remove","addEventListener","removeEventListener","Scrollbar","maxHeight","defaultProps","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes"],"sourceRoot":""}