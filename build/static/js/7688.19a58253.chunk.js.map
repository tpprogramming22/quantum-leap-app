{"version":3,"file":"static/js/7688.19a58253.chunk.js","mappings":"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","sources":["components/form/VerticalForm.tsx","components/form/FormInput.tsx","pages/apps/Projects/data.ts","pages/apps/Projects/index.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// types\nimport { ProjectsList } from './types';\n\n// images\nimport user1 from '../../../assets/images/users/user-1.jpg';\nimport user2 from '../../../assets/images/users/user-2.jpg';\nimport user3 from '../../../assets/images/users/user-3.jpg';\nimport user4 from '../../../assets/images/users/user-4.jpg';\nimport user5 from '../../../assets/images/users/user-5.jpg';\nimport user6 from '../../../assets/images/users/user-6.jpg';\nimport user7 from '../../../assets/images/users/user-7.jpg';\nimport user8 from '../../../assets/images/users/user-8.jpg';\nimport user9 from '../../../assets/images/users/user-9.jpg';\nimport user10 from '../../../assets/images/users/user-10.jpg';\n\nexport const projects: ProjectsList[] = [\n    {\n        id: 1,\n        title: 'New Admin Design',\n        category: 'WEB DESIGN',\n        state: 'Completed',\n        shortDesc:\n            'If several languages coalesce the grammar is more simple and regular than that of the individual languages...',\n        question: 56,\n        comment: 452,\n        teamMembers: [\n            {\n                image: user1,\n                name: 'Mat Helme',\n            },\n            {\n                image: user2,\n                name: 'Michael Zenaty',\n            },\n            {\n                image: user3,\n                name: 'James Anderson',\n            },\n            {\n                image: user4,\n                name: 'Mat Helme',\n            },\n            {\n                image: user5,\n                name: 'Username',\n            },\n        ],\n        progress: 80,\n        variant: 'success',\n    },\n    {\n        id: 2,\n        title: 'App Design and Develop',\n        category: 'ANDROID',\n        state: 'Completed',\n        shortDesc: 'New common language will be more simple and regular than the existing European languages...',\n        question: 77,\n        comment: 875,\n        teamMembers: [\n            {\n                image: user6,\n                name: 'Mat Helme',\n            },\n            {\n                image: user7,\n                name: 'Michael Zenaty',\n            },\n            {\n                image: user8,\n                name: 'James Anderson',\n            },\n        ],\n        progress: 45,\n        variant: 'primary',\n    },\n    {\n        id: 3,\n        title: 'Landing page Design',\n        category: 'WEB DESIGN',\n        state: 'Completed',\n        shortDesc:\n            'It will be as simple as occidental in fact it will be to an english person it will seem like simplified English...',\n        question: 87,\n        comment: 125,\n        teamMembers: [\n            {\n                image: user9,\n                name: 'Mat Helme',\n            },\n            {\n                image: user10,\n                name: 'Michael Zenaty',\n            },\n            {\n                image: user1,\n                name: 'James Anderson',\n            },\n            {\n                image: user3,\n                name: 'Mat Helme',\n            },\n        ],\n        progress: 68,\n        variant: 'pink',\n    },\n    {\n        id: 4,\n        title: 'App Design and Develop',\n        category: 'ANDROID',\n        state: 'Completed',\n        shortDesc:\n            'Everyone realizes why a new common language would be desirable one could refuse to pay expensive translators...',\n        question: 77,\n        comment: 875,\n        teamMembers: [\n            {\n                image: user5,\n                name: 'Mat Helme',\n            },\n            {\n                image: user8,\n                name: 'Michael Zenaty',\n            },\n            {\n                image: user9,\n                name: 'James Anderson',\n            },\n        ],\n        progress: 45,\n        variant: 'purple',\n    },\n    {\n        id: 5,\n        title: 'Landing page Design',\n        category: 'WEB DESIGN',\n        state: 'Completed',\n        shortDesc: 'At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium deleniti...',\n        question: 87,\n        comment: 125,\n        teamMembers: [\n            {\n                image: user3,\n                name: 'Mat Helme',\n            },\n            {\n                image: user4,\n                name: 'Michael Zenaty',\n            },\n            {\n                image: user5,\n                name: 'James Anderson',\n            },\n            {\n                image: user1,\n                name: 'Mat Helme',\n            },\n        ],\n        progress: 68,\n        variant: 'danger',\n    },\n    {\n        id: 6,\n        title: 'New Admin Design',\n        category: 'WEB DESIGN',\n        state: 'Completed',\n        shortDesc:\n            'Their separate existence is a myth. For science, music, sport, etc, Europe uses the same vocabulary....',\n        question: 56,\n        comment: 452,\n        teamMembers: [\n            {\n                image: user6,\n                name: 'Mat Helme',\n            },\n            {\n                image: user7,\n                name: 'Michael Zenaty',\n            },\n            {\n                image: user8,\n                name: 'James Anderson',\n            },\n        ],\n        progress: 80,\n        variant: 'warning',\n    },\n];\n","import { Link } from 'react-router-dom';\nimport { Badge, Card, Col, OverlayTrigger, ProgressBar, Row, Tooltip } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// components\nimport { FormInput } from '../../../components/form';\n\n// types\nimport { ProjectsList } from './types';\n\n// dummy data\nimport { projects } from './data';\n\ntype SingleProjectProps = {\n    projects: ProjectsList[];\n};\n\nconst SingleProject = ({ projects }: SingleProjectProps) => {\n    return (\n        <Row>\n            {(projects || []).map((project, index) => {\n                return (\n                    <Col xl={4} key={index.toString()}>\n                        <Card>\n                            <Card.Body className=\"project-box\">\n                                <Badge bg={project.variant} className=\"float-end\">\n                                    {project.state}\n                                </Badge>\n                                <h4 className=\"mt-0\">\n                                    <Link to=\"#\" className=\"text-dark\">\n                                        {project.title}\n                                    </Link>\n                                </h4>\n                                <p className={classNames('text-' + project.variant, 'text-uppercase', 'font-13')}>\n                                    {project.category}\n                                </p>\n                                <p className=\"text-muted font-13\">\n                                    {project.shortDesc}\n                                    <Link to=\"#\" className=\"text-primary\">\n                                        View more\n                                    </Link>\n                                </p>\n\n                                <ul className=\"list-inline\">\n                                    <li className=\"list-inline-item me-4\">\n                                        <h4 className=\"mb-0\">{project.question}</h4>\n                                        <p className=\"text-muted\">Questions</p>\n                                    </li>\n                                    <li className=\"list-inline-item\">\n                                        <h4 className=\"mb-0\">{project.comment}</h4>\n                                        <p className=\"text-muted\">Comments</p>\n                                    </li>\n                                </ul>\n\n                                <div className=\"project-members mb-2\">\n                                    <h5 className=\"float-start me-3\">Team :</h5>\n                                    <div className=\"avatar-group\">\n                                        {(project.teamMembers || []).map((member, index) => {\n                                            return (\n                                                <OverlayTrigger\n                                                    key={index.toString()}\n                                                    placement=\"bottom\"\n                                                    overlay={<Tooltip id={member.name}>{member.name}</Tooltip>}\n                                                >\n                                                    <Link to=\"#\" className=\"avatar-group-item\">\n                                                        <img\n                                                            src={member.image}\n                                                            className=\"rounded-circle avatar-sm\"\n                                                            alt=\"\"\n                                                        />\n                                                    </Link>\n                                                </OverlayTrigger>\n                                            );\n                                        })}\n                                    </div>\n                                </div>\n\n                                <h5 className=\"mb-2 fw-semibold\">\n                                    Progress\n                                    <span className={classNames('float-end', 'text-' + project.variant)}>\n                                        {project.progress}%\n                                    </span>\n                                </h5>\n                                <ProgressBar\n                                    className={classNames('progress-bar-alt-' + project.variant, 'progress-sm')}\n                                >\n                                    <ProgressBar\n                                        variant={project.variant}\n                                        now={project.progress}\n                                        className=\"progress-animated\"\n                                    />\n                                </ProgressBar>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                );\n            })}\n        </Row>\n    );\n};\n\nconst Projects = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Projects',\n        breadCrumbItems: [\n            {\n                path: 'apps/projects',\n                label: 'Apps',\n            },\n            {\n                path: 'apps/projects',\n                label: 'Projects',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <>\n            <Row>\n                <Col sm={4}>\n                    <Link to=\"#\" className=\"btn btn-purple rounded-pill w-md waves-effect waves-light mb-3\">\n                        <i className=\"mdi mdi-plus me-1\"></i>\n                        Create Project\n                    </Link>\n                </Col>\n                <Col sm={8}>\n                    <div className=\"float-end\">\n                        <form className=\"row g-2 align-items-center mb-2 mb-sm-0\">\n                            <div className=\"col-auto\">\n                                <div className=\"d-flex\">\n                                    <label className=\"d-flex align-items-center\">\n                                        Phase\n                                        <FormInput\n                                            type=\"select\"\n                                            name=\"phase\"\n                                            containerClass=\"d-inline-block ms-2\"\n                                            className=\"form-select-sm\"\n                                        >\n                                            <option>All Projects(6)</option>\n                                            <option>completed</option>\n                                            <option>Progress</option>\n                                        </FormInput>\n                                    </label>\n                                </div>\n                            </div>\n                            <div className=\"col-auto\">\n                                <div className=\"d-flex\">\n                                    <label className=\"d-flex align-items-center\">\n                                        Sort\n                                        <FormInput\n                                            type=\"select\"\n                                            name=\"sort\"\n                                            containerClass=\"d-inline-block ms-2\"\n                                            className=\"form-select-sm\"\n                                        >\n                                            <option>Date</option>\n                                            <option>Name</option>\n                                            <option>End date</option>\n                                            <option>Start Date</option>\n                                        </FormInput>\n                                    </label>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </Col>\n            </Row>\n            <SingleProject projects={projects} />\n        </>\n    );\n};\n\nexport default Projects;\n"],"names":["defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","otherProps","useState","showPassword","setShowPassword","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","labelClassName","containerClass","action","hasEndIcon","undefined","projects","title","category","state","shortDesc","question","comment","teamMembers","image","user1","user2","user3","user4","user5","progress","variant","user6","user7","user8","user9","SingleProject","Row","project","index","Col","xl","Card","Badge","bg","to","member","OverlayTrigger","placement","overlay","Tooltip","src","alt","toString","ProgressBar","now","usePageTitle","breadCrumbItems","path","active","sm"],"sourceRoot":""}