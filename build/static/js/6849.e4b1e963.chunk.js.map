{"version":3,"file":"static/js/6849.e4b1e963.chunk.js","mappings":"6TA2BMA,EAAuB,SAAvBA,EAAwB,GAQZ,IAPdC,EAOa,EAPbA,KACAC,EAMa,EANbA,IACAC,EAKa,EALbA,cACAC,EAIa,EAJbA,UACAC,EAGa,EAHbA,kBACAC,EAEa,EAFbA,gBACAC,EACa,EADbA,WAEMC,EAAWN,EACTO,GAAUC,EAAAA,EAAAA,MAAVD,MAER,GAAwBE,EAAAA,EAAAA,UAAkBL,EAAiBM,SAASX,EAAKY,MAAzE,eAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAWP,GAAS,KAAOK,EAE3BG,EAAWhB,EAAKiB,WAAajB,EAAKiB,UAAY,IAAIC,QAAO,SAACC,GAAD,aAAW,UAAAA,EAAMF,gBAAN,eAAgBG,SAAUD,EAAMF,YAEpGI,IAAkBL,EAAUI,OAAS,GAAKJ,IAAahB,EAAKiB,SAAUG,QAAU,GAElFE,EAAgBD,GAAgBE,EAAAA,EAAAA,IAAWvB,EAAKiB,SAAW,GAAK,IAEpEO,EAAAA,EAAAA,YAAU,WACNV,EAAQT,EAAiBM,SAASX,EAAKY,QACxC,CAACP,EAAiBL,IAarB,OACI,UAACO,EAAD,CAAKJ,UAAWsB,GAAAA,CAAW,WAAYtB,EAAWE,EAAiBM,SAASX,EAAKY,KAAO,SAAW,IAAnG,WACI,UAAC,KAAD,CACIc,GAAG,KACHC,QAZW,SAACC,GACpBA,EAAEC,iBACF,IAAMC,GAAUjB,EAGhB,OAFAC,EAAQgB,GACJxB,GAAYA,EAAWN,EAAM8B,IAC1B,GAQC,gBAAe9B,EAAKY,IACpBT,UAAWsB,GAAAA,CAAW,kBAAmBvB,EAAe,CACpD6B,OAAQ1B,EAAiBM,SAASX,EAAKY,OAE3CoB,GAAIhC,EAAKY,IACTqB,KAAK,SACL,iBAAe,WACf,gBAAc,OACd,gBAAepB,EAXnB,UAaKb,EAAKkC,OAAQ,cAAG/B,UAAWsB,GAAAA,CAAWzB,EAAKkC,KAAM,WAClD,gCAAQlC,EAAKmC,MAAb,QACA,gBAAKhC,UAAU,kBAGlBH,EAAKiB,WACDI,GACG,gBACIlB,UAAWsB,GAAAA,CAAWrB,EAAmB,2CAA4C,CACjFgC,KAAMrB,IAEV,kBAAiBf,EAAKY,IAJ1B,UAMI,SAACyB,EAAA,EAAD,WACMf,GAAU,IAAIgB,KAAI,SAACnB,EAAOoB,GACxB,OACI,SAACC,EAAA,EAAD,CAAaC,GAAI,EAAjB,UACI,SAACC,EAAD,CAAU1C,KAAMmB,EAAOd,gBAAiBA,KADlCkC,WAQ1B,gBAAKpC,UAAWsB,GAAAA,CAAWrB,EAAmB,CAAEgC,KAAMrB,IAAa,kBAAiBf,EAAKY,IAAzF,UACMZ,EAAKiB,UAAY,IAAIqB,KAAI,SAACnB,EAAOoB,GAC/B,OACI,SAAC,WAAD,UACKpB,EAAMF,UACH,+BAEI,SAAClB,EAAD,CACIC,KAAMmB,EACNlB,IAAI,MACJC,cAAeuB,GAAAA,CACX,gBACApB,EAAiBM,SAASQ,EAAMP,KAAO,SAAW,IAEtDP,gBAAiBA,EACjBF,UAAU,GACVC,kBAAkB,gBAClBE,WAAYA,OAIpB,+BAEI,SAACqC,EAAD,CACI3C,KAAMmB,EACNhB,UAAWsB,GAAAA,CAAW,gBAAiB,CACnCM,OAAQ1B,EAAiBM,SAASQ,EAAMP,YAvBvC2B,aAqC/CK,EAAW,SAAC,GAAmD,IAAjD5C,EAAgD,EAAhDA,KAAMG,EAA0C,EAA1CA,UAAWD,EAA+B,EAA/BA,cACjC,OACI,eAAIC,UAAWsB,GAAAA,CAAW,WAAYtB,GAAtC,UACI,SAACwC,EAAD,CAAc3C,KAAMA,EAAMG,UAAWD,OAK3CyC,EAAe,SAAC,GAAoC,IAAlC3C,EAAiC,EAAjCA,KAAMG,EAA2B,EAA3BA,UAC1B,OACI,UAAC,KAAD,CAAMuB,GAAI1B,EAAK6C,IAAMC,OAAQ9C,EAAK8C,OAAQ3C,UAAWsB,GAAAA,CAAWtB,GAAY,gBAAeH,EAAKY,IAAhG,UACKZ,EAAKkC,OAAQ,cAAG/B,UAAWsB,GAAAA,CAAWzB,EAAKkC,KAAM,WAClD,gCAAQlC,EAAKmC,MAAb,WAUNO,EAAW,SAAC,GAA8C,IAA5C1C,EAA2C,EAA3CA,KAAMK,EAAqC,EAArCA,gBACtB,OACI,8BACKL,EAAKsC,KAAI,SAACnB,EAAOoB,GACd,OACI,SAACI,EAAD,CAEI3C,KAAMmB,EACNhB,UAAWsB,GAAAA,CAAW,gBAAiB,CACnCM,OAAQ1B,EAAiBM,SAASQ,EAAMP,QAHvC2B,SAgG7B,EA5EgB,SAAC,GAAiC,IAA/BQ,EAA8B,EAA9BA,UACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAUC,EAAAA,EAAAA,QAAO,MAEvB,GAA0BzC,EAAAA,EAAAA,UAA0BqC,GAA7CK,GAAP,eACA,GAA8C1C,EAAAA,EAAAA,UAAmB,IAAjE,eAAOL,EAAP,KAAwBgD,EAAxB,KAKM/C,EAAa,SAACgD,EAAyBlB,GACrCA,GAAMiB,EAAmB,CAACC,EAAQ,KAAV,gBAAsBC,EAAAA,EAAAA,IAAcH,EAAiBE,OAM/EE,GAAaC,EAAAA,EAAAA,cAAY,WAC3B,IAAMC,EAAMC,SAASC,eAAe,kBAChCC,EAAmB,KAEvB,GAAIH,EAAK,CAEL,IADA,IAAII,EAAaJ,EAAIK,qBAAqB,KACjCxB,EAAY,EAAGA,EAAIuB,EAAM1C,SAAUmB,EACxC,GAAIS,EAASgB,WAAaF,EAAMvB,GAAGyB,SAAU,CACzCH,EAAmBC,EAAMvB,GACzB,MAIR,GAAIsB,EAAkB,CAClB,IAAMI,EAAMJ,EAAiBK,aAAa,iBACpCC,GAAWC,EAAAA,EAAAA,IAAahB,EAAiBa,GAC3CE,GACAd,EAAmB,CAACc,EAAQ,KAAV,gBAAsBZ,EAAAA,EAAAA,IAAcH,EAAiBe,UAIpF,CAACnB,EAASgB,SAAUZ,IAMvB,OAJA5B,EAAAA,EAAAA,YAAU,WACF4B,GAAmBA,EAAgBhC,OAAS,GAAGoC,MACpD,CAACA,EAAYJ,KAGZ,+BACI,eAAIjD,UAAU,aAAakE,IAAKnB,EAASlB,GAAG,iBAA5C,UACMoB,GAAmB,IAAId,KAAI,SAACtC,EAAMsE,GAChC,OACI,SAAC,WAAD,UACKtE,EAAKiB,UACF,SAAClB,EAAD,CACIC,KAAMA,EACNC,IAAI,KACJE,UAAU,WACVC,kBAAkB,gBAClBC,gBAAiBA,EACjBH,cAAc,WACdI,WAAYA,KAGhB,SAACsC,EAAD,CACI5C,KAAMA,EACNE,cAAeuB,GAAAA,CAAW,WAAY,kBAAmB,CACrDM,OAAQ1B,EAAgBM,SAASX,EAAKY,UAfjC0D,WClN7C,EAhBe,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aACd,OACI,gBAAKpE,UAAU,SAAf,UACI,gBAAKA,UAAU,kBAAf,UACI,gBAAKA,UAAWsB,GAAAA,CAAW,SAAU,mBAAoB,cAAe,gBAAxE,UACI,SAAC+C,EAAA,EAAD,CAAUC,GAAIF,EAAcpE,UAAU,kBAAtC,UACI,gBAAK6B,GAAG,sBAAR,UACI,SAAC,EAAD,CAASe,WAAW2B,EAAAA,EAAAA,oB,qCCnB5CC,EAAU,SAAiBN,GAC7B,OAAQA,GAAsB,oBAARA,EAA2B,SAAUO,GACzDP,EAAIQ,QAAUD,GAD2BP,GAoC7C,IANA,SAAuBS,EAAMC,GAC3B,OAAOC,EAAAA,EAAAA,UAAQ,WACb,OA3BG,SAAmBF,EAAMC,GAC9B,IAAIE,EAAIN,EAAQG,GACZI,EAAIP,EAAQI,GAChB,OAAO,SAAUH,GACXK,GAAGA,EAAEL,GACLM,GAAGA,EAAEN,IAsBFO,CAAUL,EAAMC,KACtB,CAACD,EAAMC,M,oCClCDK,GAAmB,EACnBC,GAAgB,EAE3B,IACE,IAAIC,EAAU,CACRC,cACF,OAAOH,GAAmB,GAGxBI,WAEF,OAAOH,EAAgBD,GAAmB,IAK1CK,EAAAA,IACFC,OAAOC,iBAAiB,OAAQL,EAASA,GACzCI,OAAOE,oBAAoB,OAAQN,GAAS,IAE9C,MAAO1D,IAiCT,KArBA,SAA0BiE,EAAMC,EAAWC,EAAST,GAClD,GAAIA,GAA8B,mBAAZA,IAA0BD,EAAe,CAC7D,IAAIG,EAAOF,EAAQE,KACfQ,EAAUV,EAAQU,QAClBC,EAAiBF,GAEhBV,GAAiBG,IACpBS,EAAiBF,EAAQG,QAAU,SAASC,EAAYC,GACtDC,KAAKT,oBAAoBE,EAAWK,EAAaH,GACjDD,EAAQO,KAAKD,KAAMD,IAGrBL,EAAQG,OAASD,GAGnBJ,EAAKF,iBAAiBG,EAAWG,EAAgBb,EAAmBE,EAAUU,GAGhFH,EAAKF,iBAAiBG,EAAWC,EAAST,K,oBCpD5C,MAAoC,qBAAXI,SAA0BA,OAAO/B,WAAY+B,OAAO/B,SAAS4C,gB,+CCUtF,IAPA,SAAgBV,EAAMC,EAAWC,EAAST,GAExC,OADAK,EAAAA,EAAAA,IAAiBE,EAAMC,EAAWC,EAAST,GACpC,YACLM,EAAAA,EAAAA,GAAoBC,EAAMC,EAAWC,EAAST,M,sBCDnC,SAASkB,EAAcX,GACpC,OAAOA,GAAQA,EAAKW,eAAiB7C,S,qDCWvC,IATA,SAA6BkC,EAAMC,EAAWC,EAAST,GACrD,IAAIU,EAAUV,GAA8B,mBAAZA,EAAwBA,EAAQU,QAAUV,EAC1EO,EAAKD,oBAAoBE,EAAWC,EAASC,GAEzCD,EAAQG,QACVL,EAAKD,oBAAoBE,EAAWC,EAAQG,OAAQF","sources":["layouts/Horizontal/Menu.tsx","layouts/Horizontal/Navbar.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/removeEventListener.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Link, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\n\n// helpers\nimport { findAllParent, findMenuItem } from '../../helpers/menu';\n\n// constants\nimport { MenuItemTypes } from '../../constants/menu';\n\n// utils\nimport { splitArray } from '../../utils/';\n\n// custom hook\nimport { useViewport } from '../../hooks';\n\ntype MenuItems = {\n    item: MenuItemTypes;\n    tag?: string;\n    linkClassName?: string;\n    className?: string;\n    subMenuClassNames?: string;\n    activeMenuItems?: string[];\n    toggleMenu?: (item: any, status: boolean) => void;\n};\n\nconst MenuItemWithChildren = ({\n    item,\n    tag,\n    linkClassName,\n    className,\n    subMenuClassNames,\n    activeMenuItems,\n    toggleMenu,\n}: MenuItems) => {\n    const Tag: any = tag;\n    const { width } = useViewport();\n\n    const [open, setOpen] = useState<boolean>(activeMenuItems!.includes(item.key));\n\n    const showMenu = width <= 768 && open;\n\n    const hasChild = item.children && (item.children || []).filter((child) => child.children?.length && child.children);\n\n    const hasGrandChild = !(hasChild!.length > 0 && hasChild) && item.children!.length >= 15;\n\n    let chunks: any[] = hasGrandChild ? splitArray(item.children!, 6) : [];\n\n    useEffect(() => {\n        setOpen(activeMenuItems!.includes(item.key));\n    }, [activeMenuItems, item]);\n\n    /**\n     * toggles the menu\n     */\n    const toggleMenuItem = (e: any) => {\n        e.preventDefault();\n        const status = !open;\n        setOpen(status);\n        if (toggleMenu) toggleMenu(item, status);\n        return false;\n    };\n\n    return (\n        <Tag className={classNames('dropdown', className, activeMenuItems!.includes(item.key) ? 'active' : '')}>\n            <Link\n                to=\"/#\"\n                onClick={toggleMenuItem}\n                data-menu-key={item.key}\n                className={classNames('dropdown-toggle', linkClassName, {\n                    active: activeMenuItems!.includes(item.key),\n                })}\n                id={item.key}\n                role=\"button\"\n                data-bs-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded={open}\n            >\n                {item.icon && <i className={classNames(item.icon, 'me-1')}></i>}\n                <span> {item.label} </span>\n                <div className=\"arrow-down\"></div>\n            </Link>\n\n            {item.children &&\n                (hasGrandChild ? (\n                    <div\n                        className={classNames(subMenuClassNames, 'mega-dropdown-menu dropdown-mega-menu-xl', {\n                            show: showMenu,\n                        })}\n                        aria-labelledby={item.key}\n                    >\n                        <Row>\n                            {(chunks || []).map((child, i) => {\n                                return (\n                                    <Col key={i} lg={4}>\n                                        <MegaMenu item={child} activeMenuItems={activeMenuItems!} />\n                                    </Col>\n                                );\n                            })}\n                        </Row>\n                    </div>\n                ) : (\n                    <div className={classNames(subMenuClassNames, { show: showMenu })} aria-labelledby={item.key}>\n                        {(item.children || []).map((child, i) => {\n                            return (\n                                <React.Fragment key={i}>\n                                    {child.children ? (\n                                        <>\n                                            {/* parent */}\n                                            <MenuItemWithChildren\n                                                item={child}\n                                                tag=\"div\"\n                                                linkClassName={classNames(\n                                                    'dropdown-item',\n                                                    activeMenuItems!.includes(child.key) ? 'active' : ''\n                                                )}\n                                                activeMenuItems={activeMenuItems}\n                                                className=\"\"\n                                                subMenuClassNames=\"dropdown-menu\"\n                                                toggleMenu={toggleMenu}\n                                            />\n                                        </>\n                                    ) : (\n                                        <>\n                                            {/* child */}\n                                            <MenuItemLink\n                                                item={child}\n                                                className={classNames('dropdown-item', {\n                                                    active: activeMenuItems!.includes(child.key),\n                                                })}\n                                            />\n                                        </>\n                                    )}\n                                </React.Fragment>\n                            );\n                        })}\n                    </div>\n                ))}\n        </Tag>\n    );\n};\n\nconst MenuItem = ({ item, className, linkClassName }: MenuItems) => {\n    return (\n        <li className={classNames('nav-item', className)}>\n            <MenuItemLink item={item} className={linkClassName} />\n        </li>\n    );\n};\n\nconst MenuItemLink = ({ item, className }: MenuItems) => {\n    return (\n        <Link to={item.url!} target={item.target} className={classNames(className)} data-menu-key={item.key}>\n            {item.icon && <i className={classNames(item.icon, 'me-1')}></i>}\n            <span> {item.label} </span>\n        </Link>\n    );\n};\n\ntype MegaMenuProps = {\n    item: MenuItemTypes[];\n    activeMenuItems: string[];\n};\n\nconst MegaMenu = ({ item, activeMenuItems }: MegaMenuProps) => {\n    return (\n        <>\n            {item.map((child, i) => {\n                return (\n                    <MenuItemLink\n                        key={i}\n                        item={child}\n                        className={classNames('dropdown-item', {\n                            active: activeMenuItems!.includes(child.key),\n                        })}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\n/**\n * Renders the application menu\n */\n\ntype AppMenuProps = {\n    menuItems: MenuItemTypes[];\n};\n\nconst AppMenu = ({ menuItems }: AppMenuProps) => {\n    let location = useLocation();\n    const menuRef = useRef(null);\n\n    const [topnavMenuItems] = useState<MenuItemTypes[]>(menuItems);\n    const [activeMenuItems, setActiveMenuItems] = useState<string[]>([]);\n\n    /*\n     * toggle the menus\n     */\n    const toggleMenu = (menuItem: MenuItemTypes, show: boolean) => {\n        if (show) setActiveMenuItems([menuItem['key'], ...findAllParent(topnavMenuItems, menuItem)]);\n    };\n\n    /**\n     * activate the menuitems\n     */\n    const activeMenu = useCallback(() => {\n        const div = document.getElementById('main-side-menu');\n        let matchingMenuItem = null;\n\n        if (div) {\n            let items: any = div.getElementsByTagName('a');\n            for (let i: number = 0; i < items.length; ++i) {\n                if (location.pathname === items[i].pathname) {\n                    matchingMenuItem = items[i];\n                    break;\n                }\n            }\n\n            if (matchingMenuItem) {\n                const mid = matchingMenuItem.getAttribute('data-menu-key');\n                const activeMt = findMenuItem(topnavMenuItems, mid);\n                if (activeMt) {\n                    setActiveMenuItems([activeMt['key'], ...findAllParent(topnavMenuItems, activeMt)]);\n                }\n            }\n        }\n    }, [location.pathname, topnavMenuItems]);\n\n    useEffect(() => {\n        if (topnavMenuItems && topnavMenuItems.length > 0) activeMenu();\n    }, [activeMenu, topnavMenuItems]);\n\n    return (\n        <>\n            <ul className=\"navbar-nav\" ref={menuRef} id=\"main-side-menu\">\n                {(topnavMenuItems || []).map((item, idx) => {\n                    return (\n                        <React.Fragment key={idx}>\n                            {item.children ? (\n                                <MenuItemWithChildren\n                                    item={item}\n                                    tag=\"li\"\n                                    className=\"nav-item\"\n                                    subMenuClassNames=\"dropdown-menu\"\n                                    activeMenuItems={activeMenuItems}\n                                    linkClassName=\"nav-link\"\n                                    toggleMenu={toggleMenu}\n                                />\n                            ) : (\n                                <MenuItem\n                                    item={item}\n                                    linkClassName={classNames('nav-link', 'dropdown-toggle', {\n                                        active: activeMenuItems.includes(item.key),\n                                    })}\n                                />\n                            )}\n                        </React.Fragment>\n                    );\n                })}\n            </ul>\n        </>\n    );\n};\n\nexport default AppMenu;\n","import React from 'react';\nimport { Collapse } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n// helpers\nimport { getHorizontalMenuItems } from '../../helpers/menu';\n\n// components\nimport AppMenu from './Menu';\n\ntype NavbarProps = {\n    isMenuOpened?: boolean;\n};\n\nconst Navbar = ({ isMenuOpened }: NavbarProps) => {\n    return (\n        <div className=\"topnav\">\n            <div className=\"container-fluid\">\n                <nav className={classNames('navbar', 'navbar-expand-lg', 'topnav-menu', 'navbar-light')}>\n                    <Collapse in={isMenuOpened} className=\"navbar-collapse\">\n                        <div id=\"topnav-menu-content\">\n                            <AppMenu menuItems={getHorizontalMenuItems()} />\n                        </div>\n                    </Collapse>\n                </nav>\n            </div>\n        </div>\n    );\n};\n\nexport default Navbar;\n","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;"],"names":["MenuItemWithChildren","item","tag","linkClassName","className","subMenuClassNames","activeMenuItems","toggleMenu","Tag","width","useViewport","useState","includes","key","open","setOpen","showMenu","hasChild","children","filter","child","length","hasGrandChild","chunks","splitArray","useEffect","classNames","to","onClick","e","preventDefault","status","active","id","role","icon","label","show","Row","map","i","Col","lg","MegaMenu","MenuItemLink","MenuItem","url","target","menuItems","location","useLocation","menuRef","useRef","topnavMenuItems","setActiveMenuItems","menuItem","findAllParent","activeMenu","useCallback","div","document","getElementById","matchingMenuItem","items","getElementsByTagName","pathname","mid","getAttribute","activeMt","findMenuItem","ref","idx","isMenuOpened","Collapse","in","getHorizontalMenuItems","toFnRef","value","current","refA","refB","useMemo","a","b","mergeRefs","optionsSupported","onceSupported","options","passive","once","canUseDOM","window","addEventListener","removeEventListener","node","eventName","handler","capture","wrappedHandler","__once","onceHandler","event","this","call","createElement","ownerDocument"],"sourceRoot":""}