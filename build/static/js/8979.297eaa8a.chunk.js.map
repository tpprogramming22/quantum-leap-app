{"version":3,"file":"static/js/8979.297eaa8a.chunk.js","mappings":"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","sources":["components/Loader.tsx","components/form/VerticalForm.tsx","components/form/FormInput.tsx","pages/apps/Chat/data.ts","pages/apps/Chat/ChatUsers.tsx","pages/apps/Chat/ChatArea.tsx","pages/apps/Chat/index.tsx","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js"],"sourcesContent":["const Loader = () => {\n    return (\n        <div className=\"preloader\" id=\"preloader\">\n            <div className=\"status\" id=\"status\">\n                <div className=\"spinner\">\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// types\nimport { ChatMessage, ChatUser } from './types';\n\n// images\nimport avatar1 from '../../../assets/images/users/user-1.jpg';\nimport avatar2 from '../../../assets/images/users/user-2.jpg';\nimport avatar3 from '../../../assets/images/users/user-3.jpg';\nimport avatar4 from '../../../assets/images/users/user-4.jpg';\nimport avatar5 from '../../../assets/images/users/user-5.jpg';\nimport avatar6 from '../../../assets/images/users/user-6.jpg';\nimport avatar7 from '../../../assets/images/users/user-7.jpg';\n\nconst users: ChatUser[] = [\n    {\n        id: 1,\n        name: 'Margaret Clayton',\n        avatar: avatar2,\n        lastMessage: 'I have finished it! See you so...',\n        lastMessageOn: '05 min',\n        userStatus: 'online',\n    },\n    {\n        id: 2,\n        name: 'Jason Bent',\n        icon: 'mdi mdi-account',\n        variant: 'success',\n        lastMessage: 'Hey! there I am available',\n        lastMessageOn: '20 min',\n        userStatus: 'online',\n    },\n    {\n        id: 3,\n        name: 'Mark Nieto',\n        avatar: avatar3,\n        lastMessage: 'This theme is awesome!',\n        lastMessageOn: '32 min',\n        lastMessageSeen: false,\n        userStatus: 'offline',\n    },\n    {\n        id: 4,\n        name: 'Garret Sauer',\n        avatar: avatar4,\n        lastMessage: 'Nice to meet you',\n        lastMessageOn: '01 hr',\n        lastMessageSeen: false,\n        userStatus: 'online',\n    },\n    {\n        id: 5,\n        name: 'Michael James',\n        avatar: avatar5,\n        lastMessage: 'Good morning',\n        lastMessageOn: '01 hr',\n        userStatus: 'offline',\n    },\n    {\n        id: 6,\n        name: 'Felicia Johnson',\n        icon: 'mdi mdi-account',\n        variant: 'primary',\n        lastMessage: 'Meeting 10am',\n        lastMessageOn: '02 hr',\n        lastMessageSeen: false,\n        userStatus: 'offline',\n    },\n    {\n        id: 7,\n        name: 'Tracy Marsh',\n        avatar: avatar6,\n        lastMessage: 'Hey! there I am available',\n        lastMessageOn: '04 hr',\n        userStatus: 'online',\n    },\n    {\n        id: 8,\n        name: 'Richard Lopez',\n        avatar: avatar7,\n        lastMessage: 'Nice to meet you',\n        lastMessageOn: '05 hr',\n        userStatus: 'offline',\n    },\n];\n\nconst messages: ChatMessage[] = [];\n\nconst defaultTo = {\n    id: 9,\n    name: 'Geneva M',\n    avatar: avatar1,\n};\n\nfor (const user of users) {\n    messages.push(\n        {\n            id: 1,\n            message: 'Hello!',\n            to: defaultTo,\n            from: user,\n            sendOn: '10:00',\n        },\n        {\n            id: 2,\n            message: 'Hi, How are you? What about our next meeting?',\n            to: user,\n            from: defaultTo,\n            sendOn: '10:01',\n        },\n        {\n            id: 3,\n            message: 'Yeah everything is fine',\n            to: defaultTo,\n            from: user,\n            sendOn: '10:03',\n        },\n        {\n            id: 4,\n            message: '& Next meeting tomorrow 10.00AM',\n            to: defaultTo,\n            from: user,\n            sendOn: '10:03',\n        },\n        {\n            id: 5,\n            message: 'Wow thats great',\n            to: user,\n            from: defaultTo,\n            sendOn: '10:04',\n        }\n    );\n}\n\nexport { users, messages };\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Dropdown } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\n\n// types\nimport { ChatUser } from './types';\n\n// dummy data\nimport { users } from './data';\n\n// images\nimport profilePic from '../../../assets/images/users/user-1.jpg';\nimport classNames from 'classnames';\n\ntype ChatUsersProps = {\n    onUserSelect: (value: ChatUser) => void;\n};\n\n// ChatUsers\nconst ChatUsers = ({ onUserSelect }: ChatUsersProps) => {\n    const [user, setUser] = useState<ChatUser[]>([...users]);\n    const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n    // Search the user\n    // @param {*} text\n    const search = (text: string) => {\n        setUser(text ? [...users].filter((u) => u.name!.toLowerCase().indexOf(text.toLowerCase()) >= 0) : [...users]);\n    };\n\n    // Activates the user\n    // @param {*} user\n    const activateUser = (user: ChatUser) => {\n        setSelectedUser(user);\n        if (onUserSelect) {\n            onUserSelect(user);\n        }\n    };\n\n    return (\n        <>\n            <Card className=\"chat-list-card mb-xl-0\">\n                <Card.Body>\n                    <Dropdown className=\"float-end\" align=\"end\">\n                        <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                            <i className=\"mdi mdi-dots-vertical\"></i>\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>Action</Dropdown.Item>\n                            <Dropdown.Item>Anothther Action</Dropdown.Item>\n                            <Dropdown.Item>Something Else</Dropdown.Item>\n                            <Dropdown.Item>Separated link</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n\n                    <div className=\"d-flex\">\n                        <div className=\"flex-shrink-0\">\n                            <img src={profilePic} className=\"rounded-circle avatar-sm\" alt=\"\" />\n                        </div>\n                        <div className=\"flex-grow-1 align-items-center ms-2\">\n                            <h5 className=\"mt-0 mb-1\">\n                                <Link to=\"/\" className=\"text-reset\">\n                                    Nowak Helme\n                                </Link>\n                            </h5>\n                            <p className=\"font-13 text-muted mb-0\">Admin Head</p>\n                        </div>\n                    </div>\n\n                    <hr className=\"my-3\" />\n\n                    <form className=\"search-box chat-search-box\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Search...\"\n                            onKeyUp={(e: any) => search(e.target.value)}\n                        />\n                        <span className=\"mdi mdi-magnify search-icon\"></span>\n                    </form>\n\n                    <hr className=\"my-3\" />\n\n                    <ul className=\"list-unstyled chat-list mb-0\">\n                        <SimpleBar style={{ height: '410px', width: '100%' }}>\n                            {(user || []).map((user, index) => {\n                                return (\n                                    <li\n                                        key={index.toString()}\n                                        className={classnames({\n                                            active: user.id === selectedUser.id,\n                                            unread: user.lastMessageSeen === false,\n                                        })}\n                                    >\n                                        <Link\n                                            to=\"#\"\n                                            onClick={(e: any) => {\n                                                activateUser(user);\n                                            }}\n                                        >\n                                            <div className=\"d-flex\">\n                                                {user.avatar ? (\n                                                    <div\n                                                        className={classNames(\n                                                            'flex-shrink-0',\n                                                            'chat-user-img',\n                                                            'align-self-center',\n                                                            'me-2',\n                                                            user.userStatus === 'online' && 'active'\n                                                        )}\n                                                    >\n                                                        <img\n                                                            src={user.avatar}\n                                                            className=\"rounded-circle avatar-sm\"\n                                                            alt=\"\"\n                                                        />\n                                                    </div>\n                                                ) : (\n                                                    <div\n                                                        className={classNames(\n                                                            'flex-shrink-0',\n                                                            'chat-user-img',\n                                                            'avatar-sm',\n                                                            'align-self-center',\n                                                            'me-2',\n                                                            user.userStatus === 'online' && 'active'\n                                                        )}\n                                                    >\n                                                        <span\n                                                            className={classnames(\n                                                                'avatar-title',\n                                                                'rounded-circle',\n                                                                'bg-soft-' + user.variant,\n                                                                'text-' + user.variant\n                                                            )}\n                                                        >\n                                                            <i className={classNames(user.icon)}></i>\n                                                        </span>\n                                                    </div>\n                                                )}\n                                                <div className=\"flex-grow-1 overflow-hidden\">\n                                                    <h5 className=\"text-truncate font-14 mt-0 mb-1\">{user.name}</h5>\n                                                    <p className=\"text-truncate mb-0\">{user.lastMessage}</p>\n                                                </div>\n                                                <div className=\"font-11\">{user.lastMessageOn}</div>\n                                            </div>\n                                        </Link>\n                                    </li>\n                                );\n                            })}\n                        </SimpleBar>\n                    </ul>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nexport default ChatUsers;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport { FormInput } from '../../../components/form';\nimport Loader from '../../../components/Loader';\n\n// types\nimport { ChatMessage, ChatUser } from './types';\n\n// dummy data\nimport { messages } from './data';\n\n// images\nimport avatar1 from '../../../assets/images/users/user-1.jpg';\n\nconst UserMessage = ({ message, toUser }: { message: ChatMessage; toUser: ChatUser }) => {\n    return (\n        <li className={classnames('clearfix', { odd: message.from.id === toUser.id })}>\n            <div className=\"message-list\">\n                {message.from.avatar ? (\n                    <div className=\"chat-avatar\">\n                        <img src={message.from.avatar} alt=\"\" />\n                    </div>\n                ) : (\n                    <div className=\"chat-avatar\">\n                        <span\n                            className={classnames(\n                                'd-flex',\n                                'align-items-center',\n                                'justify-content-center',\n                                'avatar-sm',\n                                'rounded-circle',\n                                'bg-soft-' + message.from.variant,\n                                'text-' + message.from.variant\n                            )}\n                        >\n                            <i className={classnames(message.from.icon)}></i>\n                        </span>\n                    </div>\n                )}\n\n                <div className=\"conversation-text\">\n                    <div className=\"ctext-wrap\">\n                        <i>{message.from.name}</i>\n                        <p>{message.message}</p>\n                    </div>\n                    <span className=\"time\">{message.sendOn}</span>\n                </div>\n            </div>\n        </li>\n    );\n};\n\ntype ChatAreaProps = {\n    selectedUser: ChatUser;\n};\n\n// ChatArea\nconst ChatArea = ({ selectedUser }: ChatAreaProps) => {\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const [userMessages, setUserMessages] = useState<ChatMessage[]>([]);\n    const [toUser] = useState<ChatUser>({\n        id: 9,\n        name: 'Geneva M',\n        avatar: avatar1,\n    });\n\n    // Fetches the messages for selected user\n    const getMessagesForUser = useCallback(() => {\n        if (selectedUser) {\n            setLoading(true);\n            setTimeout(() => {\n                setUserMessages(\n                    [...messages].filter(\n                        (m) =>\n                            (m.to.id === toUser.id && m.from.id === selectedUser.id) ||\n                            (toUser.id === m.from.id && m.to.id === selectedUser.id)\n                    )\n                );\n                setLoading(false);\n            }, 750);\n        }\n    }, [selectedUser, toUser]);\n\n    useEffect(() => {\n        getMessagesForUser();\n    }, [getMessagesForUser]);\n\n    // form validation schema\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            newMessage: yup.string().required('Please enter your messsage'),\n        })\n    );\n\n    // form methods\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n        reset,\n    } = methods;\n\n    // sends the chat message\n    const sendChatMessage = (data: { [x: string]: string }) => {\n        let newUserMessages = [...userMessages];\n        newUserMessages.push({\n            id: userMessages.length + 1,\n            from: toUser,\n            to: selectedUser,\n            message: data['newMessage'],\n            sendOn: new Date().getHours() + ':' + new Date().getMinutes(),\n        });\n        setUserMessages(newUserMessages);\n        reset();\n    };\n\n    return (\n        <Card className=\"conversation-list-card\">\n            <Card.Body>\n                <Dropdown className=\"float-end\" align=\"end\">\n                    <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                        <i className=\"mdi mdi-dots-vertical\"></i>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Action</Dropdown.Item>\n                        <Dropdown.Item>Anothther Action</Dropdown.Item>\n                        <Dropdown.Item>Something Else</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item>Separated link</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n\n                <div className=\"d-flex\">\n                    <div className=\"flex-grow-1\">\n                        <h5 className=\"mt-0 mb-1 text-truncate\">{selectedUser.name}</h5>\n                        <p className=\"font-13 text-muted mb-0\">\n                            <i className=\"mdi mdi-circle text-success me-1 font-11\"></i>\n                            Active\n                        </p>\n                    </div>\n                </div>\n\n                <hr className=\"my-3\" />\n\n                {loading && <Loader />}\n                <SimpleBar style={{ height: '410px', width: '100%' }}>\n                    <ul className=\"conversation-list\">\n                        <li>\n                            <div className=\"chat-day-title\">\n                                <span className=\"title\">Today</span>\n                            </div>\n                        </li>\n                        {(userMessages || []).map((message, index) => {\n                            return <UserMessage key={index.toString()} message={message} toUser={toUser} />;\n                        })}\n                    </ul>\n                </SimpleBar>\n            </Card.Body>\n            <div className=\"p-3 conversation-input border-top\">\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(sendChatMessage)}>\n                    <Row>\n                        <Col>\n                            <FormInput\n                                type=\"text\"\n                                name=\"newMessage\"\n                                placeholder=\"Enter Message...\"\n                                register={register}\n                                key=\"newMessage\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary chat-send width-md waves-effect waves-light\"\n                            >\n                                <span className=\"d-none d-sm-inline-block me-2\">Send</span>\n                                <i className=\"mdi mdi-send\"></i>\n                            </button>\n                        </Col>\n                    </Row>\n                </form>\n            </div>\n        </Card>\n    );\n};\n\nexport default ChatArea;\n","import { useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// component\nimport ChatUsers from './ChatUsers';\nimport ChatArea from './ChatArea';\n\n// types\nimport { ChatUser } from './types';\n\n// dummy data\nimport { users } from './data';\n\nconst ChatApp = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Chat',\n        breadCrumbItems: [\n            {\n                path: '/apps/chat',\n                label: 'Apps',\n            },\n            {\n                path: '/apps/chat',\n                label: 'Chat',\n                active: true,\n            },\n        ],\n    });\n\n    const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n    // On user change\n    const onUserChange = (user: ChatUser) => {\n        setSelectedUser(user);\n    };\n\n    return (\n        <Row>\n            <Col xl={3} lg={4}>\n                <ChatUsers onUserSelect={onUserChange} />\n            </Col>\n            <Col xl={9} lg={8}>\n                <ChatArea selectedUser={selectedUser} />\n            </Col>\n        </Row>\n    );\n};\n\nexport default ChatApp;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;"],"names":["className","id","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","otherProps","useState","showPassword","setShowPassword","InputGroup","Form","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","labelClassName","containerClass","action","hasEndIcon","undefined","users","avatar","lastMessage","lastMessageOn","userStatus","icon","variant","lastMessageSeen","messages","defaultTo","avatar1","user","push","message","to","from","sendOn","onUserSelect","setUser","selectedUser","setSelectedUser","Card","Dropdown","align","src","profilePic","alt","onKeyUp","e","text","target","value","filter","u","toLowerCase","indexOf","style","height","width","index","classnames","active","unread","activateUser","toString","UserMessage","toUser","odd","loading","setLoading","userMessages","setUserMessages","getMessagesForUser","useCallback","setTimeout","m","useEffect","schemaResolver","yupResolver","yup","shape","newMessage","required","reset","Loader","data","newUserMessages","length","Date","getHours","getMinutes","Row","Col","xs","usePageTitle","title","breadCrumbItems","path","xl","lg","CardImg","bsPrefix","Component","prefix","useBootstrapPrefix","_jsx","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context"],"sourceRoot":""}