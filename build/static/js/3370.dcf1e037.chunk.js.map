{"version":3,"file":"static/js/3370.dcf1e037.chunk.js","mappings":"4KA4EA,UA9DqB,WACjB,OAAkCA,EAAAA,EAAAA,MAA1BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YACZC,GAAuBC,EAAAA,EAAAA,QAAO,MAE5BC,EAAuBH,GAAY,SAACI,GAAD,MAAY,CACnDD,mBAAoBC,EAAMC,OAAOF,uBAD7BA,mBAeFG,GAAmBC,EAAAA,EAAAA,cACrB,SAACC,GACG,GAAIL,EAAoB,CACpB,GAAIF,GAAmBA,EAAgBQ,SAAWR,EAAgBQ,QAAQC,SAASF,EAAEG,QACjF,OAEAZ,GAASa,EAAAA,EAAAA,UAIrB,CAACX,EAAiBF,EAAUI,IAUhC,OAPAU,EAAAA,EAAAA,YAAU,WAEN,OADAC,SAASC,iBAAiB,YAAaT,GAAkB,GAClD,WACHQ,SAASE,oBAAoB,YAAaV,GAAkB,MAEjE,CAACA,KAGA,iCACI,gBAAKW,UAAU,YAAYC,IAAKjB,KAgBhC,gBAAKgB,UAAU","sources":["layouts/RightSidebar.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { Tab } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// actions\nimport { hideRightSidebar } from '../redux/actions';\n\n// hooks\nimport { useRedux } from '../hooks/';\n\n// components\nimport Scrollbar from '../components/Scrollbar';\nimport ThemeCustomizer from '../components/ThemeCustomizer';\n\nconst RightSidebar = () => {\n    const { dispatch, appSelector } = useRedux();\n    const rightBarNodeRef: any = useRef(null);\n\n    const { isOpenRightSideBar } = appSelector((state) => ({\n        isOpenRightSideBar: state.Layout.isOpenRightSideBar,\n    }));\n\n    /**\n     * Handles the close\n     */\n    const handleClose = (e: any) => {\n        e.preventDefault();\n        dispatch(hideRightSidebar());\n    };\n\n    /**\n     * Handle the click anywhere in doc\n     */\n    const handleOtherClick = useCallback(\n        (e: any) => {\n            if (isOpenRightSideBar) {\n                if (rightBarNodeRef && rightBarNodeRef.current && rightBarNodeRef.current.contains(e.target)) {\n                    return;\n                } else {\n                    dispatch(hideRightSidebar());\n                }\n            }\n        },\n        [rightBarNodeRef, dispatch, isOpenRightSideBar]\n    );\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleOtherClick, false);\n        return () => {\n            document.removeEventListener('mousedown', handleOtherClick, false);\n        };\n    }, [handleOtherClick]);\n\n    return (\n        <>\n            <div className=\"right-bar\" ref={rightBarNodeRef}>\n                {/* <Scrollbar style={{ maxHeight: '100%', zIndex: 10000 }} className=\"h-100\">\n                    <div className=\"rightbar-title\">\n                        <Link to=\"#\" className=\"right-bar-toggle float-end\" onClick={handleClose}>\n                            <i className=\"mdi mdi-close\"></i>\n                        </Link>\n                        <h4 className=\"font-16 m-0 text-white\">Theme Customizer</h4>\n                    </div>\n\n                    <Tab.Content className=\"pt-0\">\n                        <Tab.Pane active eventKey=\"themecustomizer\">\n                            <ThemeCustomizer />\n                        </Tab.Pane>\n                    </Tab.Content>\n                </Scrollbar> */}\n            </div>\n            <div className=\"rightbar-overlay\"></div>\n        </>\n    );\n};\n\nexport default RightSidebar;\n"],"names":["useRedux","dispatch","appSelector","rightBarNodeRef","useRef","isOpenRightSideBar","state","Layout","handleOtherClick","useCallback","e","current","contains","target","hideRightSidebar","useEffect","document","addEventListener","removeEventListener","className","ref"],"sourceRoot":""}