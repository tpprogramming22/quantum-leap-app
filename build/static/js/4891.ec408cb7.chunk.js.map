{"version":3,"file":"static/js/4891.ec408cb7.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/react-table/src/publicUtils.js","../node_modules/react-table/src/utils.js","../node_modules/react-table/src/makeDefaultPluginHooks.js","../node_modules/react-table/src/hooks/useColumnVisibility.js","../node_modules/react-table/src/hooks/useTable.js","../node_modules/react-table/src/plugin-hooks/useExpanded.js","../node_modules/react-table/src/filterTypes.js","../node_modules/react-table/src/plugin-hooks/useFilters.js","../node_modules/react-table/src/plugin-hooks/useGlobalFilter.js","../node_modules/react-table/src/aggregations.js","../node_modules/react-table/src/plugin-hooks/useGroupBy.js","../node_modules/react-table/src/sortTypes.js","../node_modules/react-table/src/plugin-hooks/useSortBy.js","../node_modules/react-table/src/plugin-hooks/usePagination.js","../node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../node_modules/react-table/src/plugin-hooks/useRowSelect.js","../node_modules/react-table/src/plugin-hooks/useRowState.js","../node_modules/react-table/src/plugin-hooks/useColumnOrder.js","../node_modules/react-table/src/plugin-hooks/useResizeColumns.js","../node_modules/react-table/src/plugin-hooks/useAbsoluteLayout.js","../node_modules/react-table/src/plugin-hooks/useBlockLayout.js","../node_modules/react-table/src/plugin-hooks/useFlexLayout.js","../node_modules/react-table/src/plugin-hooks/useGridLayout.js","../node_modules/react-table/index.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    aggregations[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n","export function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: `grid`,\n      gridTemplateColumns: instance.state.gridLayout.columnWidths.map(w => w).join(` `),\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky` //enables a scroll wrapper to be placed around the table and have sticky headers\n    },\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === `init`) {\n    return {\n      gridLayout: {\n        columnWidths: instance.columns.map(() => `auto`),\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === `columnStartResizing`) {\n    const { columnId } = action\n    const columnIndex = instance.visibleColumns.findIndex(col => col.id === columnId)\n    const elWidth = getElementWidth(columnId)\n\n    if (elWidth !== undefined) {\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          columnId,\n          columnIndex,\n          startingWidth: elWidth\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === `columnResizing`) {\n    const {\n      columnIndex,\n      startingWidth,\n      columnWidths,\n    } = state.gridLayout\n\n    const change = state.columnResizing.startX - action.clientX\n    const newWidth = startingWidth - change\n    const columnWidthsCopy = [...columnWidths]\n    columnWidthsCopy[columnIndex] = `${newWidth}px`\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: columnWidthsCopy,\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-table.production.min.js')\n} else {\n  module.exports = require('./dist/react-table.development.js')\n}\n"],"names":["CardImg","React","ref","bsPrefix","className","variant","as","Component","props","prefix","useBootstrapPrefix","_jsx","classNames","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","value","children","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","BsComponent","Tag","resolvedPrefix","p","actions","init","defaultRenderer","emptyRenderer","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","next","style","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","loopHooks","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","getPrototypeOf","prototype","isReactComponent","$$typeof","includes","description","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","accessorPath","split","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","String","d","join","reOpenBracket","reCloseBracket","set","cursor","pathPart","e","row","error","decorateColumn","userDefaultColumn","originalWidth","makeHeaderGroups","allColumns","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","addToExpandedRows","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","handleColumn","parentVisible","subColumn","subHeader","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","subHeaders","header","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","expandedDepth","maxDepth","splitId","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","undefined","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","mid","floor","nums","sort","b","from","Set","size","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","resolvedGroupBy","groupByColumns","col","g","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","aggregateFn","aggregate","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","resKey","reSplitAlphaNumeric","compareBasic","getRowValuesByColumnID","row1","row2","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","getTime","alower","blower","replaceNonNumeric","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","u","columnGroup","PivotHeader","uniqueValue","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","window","addEventListener","err","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","totalColumnsMinWidth","flex","useGridLayout","gridTemplateColumns","gridLayout","w","columnIndex","elWidth","getElementById","offsetWidth","startingWidth","newWidth","columnWidthsCopy","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups","module","exports"],"sourceRoot":""}